{
  "address": "0x6Ce28A0238f34D103eCB4AE5e54b0fe648E55E53",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "debtId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "debtor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creditor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "DebtAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "debtor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creditor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DebtSettled",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        }
      ],
      "name": "acceptInvite",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_creditor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "addDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_creditors",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "addExpense",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        }
      ],
      "name": "createGroup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_person",
          "type": "address"
        }
      ],
      "name": "findDebts",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "creditor",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Splitwiser.PaymentToDo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "groups",
      "outputs": [
        {
          "internalType": "string",
          "name": "groupName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "nextDebtId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_invited",
          "type": "address"
        }
      ],
      "name": "inviteMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        }
      ],
      "name": "payDebtsForGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pendingGroupInvites",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_invited",
          "type": "address"
        }
      ],
      "name": "removeInvite",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        }
      ],
      "name": "settleGroupDebts",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc8661c625005dff5d72db06fe313ccee5a949cc02d0e77fc842225f7f0ed9058",
  "receipt": {
    "to": null,
    "from": "0xc9b89C20e15F18589005E08ADf6c079A19C58ab6",
    "contractAddress": "0x6Ce28A0238f34D103eCB4AE5e54b0fe648E55E53",
    "transactionIndex": 26,
    "gasUsed": "1437724",
    "logsBloom": "0x
    "blockHash": "0x9bebd177a26aec8720becbeba4ec321f2b025bbe09acde1d842d992f11c1e548",
    "transactionHash": "0xc8661c625005dff5d72db06fe313ccee5a949cc02d0e77fc842225f7f0ed9058",
    "logs": [],
    "blockNumber": 6303384,
    "cumulativeGasUsed": "5743324",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0725ce810be8f2f8f54a5658b76a1625",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"debtId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creditor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"DebtAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creditor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DebtSettled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"}],\"name\":\"acceptInvite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_creditor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"addDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_creditors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"addExpense\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"}],\"name\":\"createGroup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_person\",\"type\":\"address\"}],\"name\":\"findDebts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creditor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Splitwiser.PaymentToDo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"groups\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"groupName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nextDebtId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_invited\",\"type\":\"address\"}],\"name\":\"inviteMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"}],\"name\":\"payDebtsForGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingGroupInvites\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_invited\",\"type\":\"address\"}],\"name\":\"removeInvite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"}],\"name\":\"settleGroupDebts\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Splitwiser.sol\":\"Splitwiser\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/Splitwiser.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\ncontract Splitwiser {\\n    struct Debt {\\n        string name;\\n        address debtor;\\n        address creditor;\\n        uint256 amount;\\n        bool paid;\\n    }\\n\\n    struct Group {\\n        string groupName;\\n        address[] members;\\n        mapping(uint256 => Debt) debts; // A mapping from debtId to actual Debt\\n        uint256 nextDebtId;\\n    }\\n\\n    // (Optimization) Data structure to keep track of what a person owe and\\n    // in what group.\\n    struct PaymentToDo {\\n        address creditor;\\n        uint256 amount;\\n    }\\n\\n    uint256 private nextGroupId = 1; // Keep track of the next groupId\\n    mapping(uint256 => Group) public groups;\\n    mapping(address => uint256[]) public pendingGroupInvites; // Database of pending user invitations to a group(s)\\n\\n    // (Pull-payment pattern) A mapping address => groupId => balance\\n    // to keep track of user balance in smart contract\\n    mapping(address => mapping(uint256 => int256)) public balances;\\n\\n    // (Optimization) A mapping of address => groupId => payments ( creditor + amt )\\n    // to keep track of what a person owe and in what group. Faster and cheaper than iterating all groups.\\n    mapping(address => mapping(uint256 => PaymentToDo[])) private paymentsToDo;\\n\\n    // Event to notify users if a new debt is added\\n    event DebtAdded(uint256 indexed groupId, uint256 indexed debtId, address indexed debtor, address creditor, uint256 amount, string name);\\n\\n    modifier onlyMember(uint256 _groupId) {\\n        require(isMember(_groupId, msg.sender), \\\"You are not a member of this group\\\");\\n        _;\\n    }\\n\\n    function acceptInvite(uint256 _groupId) public {\\n        uint256[] storage invitations = pendingGroupInvites[msg.sender];\\n        require(invitations.length > 0, \\\"No pending invites\\\");\\n        for(uint i = 0; i < invitations.length; i++) {\\n            if(invitations[i] == _groupId){\\n                delete pendingGroupInvites[msg.sender][i];\\n                groups[_groupId].members.push(msg.sender);\\n            }\\n        }\\n    }\\n\\n    function createGroup(string memory _name, address[] memory _members) external returns (uint256) {\\n        uint256 currentGroupId = nextGroupId;\\n        Group storage newGroup = groups[currentGroupId];\\n        nextGroupId = nextGroupId + 1;\\n        newGroup.groupName = _name;\\n        newGroup.members = _members;\\n        newGroup.nextDebtId = 1;\\n        return currentGroupId;\\n    }\\n\\n    function isMember(uint256 _groupId, address _member) internal view returns (bool) {\\n        address[] memory members = groups[_groupId].members;\\n        for (uint i = 0; i < members.length; i++) {\\n            if (members[i] == _member) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function isPending(uint256 _groupId, address _member) internal view returns (bool) {\\n        for(uint i = 0; i < pendingGroupInvites[_member].length; i++) {\\n            if (pendingGroupInvites[_member][i] == _groupId) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function inviteMember(uint256 _groupId, address _invited) public onlyMember(_groupId) {\\n        require(!isPending(_groupId, _invited) && !isMember(_groupId, _invited), \\\"Member is already in (pending) group\\\");\\n        pendingGroupInvites[_invited].push(_groupId);\\n    }\\n\\n    function removeInvite(uint256 _groupId, address _invited) public onlyMember(_groupId) {\\n        require(!isMember(_groupId, _invited), \\\"Member is already in group\\\");\\n        uint256[] storage invites = pendingGroupInvites[_invited];\\n        for (uint i = 0; i < invites.length; i++) {\\n            if (invites[i] == _groupId) {\\n                invites[i] = invites[invites.length - 1];\\n                invites.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function addDebt(uint256 _groupId, address _creditor, uint256 _amount, string memory _name) external onlyMember(_groupId) {\\n        require(_creditor != msg.sender, \\\"Cannot owe yourself\\\");\\n        require(_amount > 0, \\\"Amount must be positive\\\");\\n        require(isMember(_groupId, _creditor), \\\"Creditor must be a group member\\\");\\n\\n        _addDebt(_groupId, msg.sender, _creditor, _amount, _name);\\n    }\\n\\n    function _addDebt(uint256 _groupId, address _debitor, address _creditor, uint256 _amount, string memory _name) internal {\\n        Group storage group = groups[_groupId];\\n        uint256 debtId = group.nextDebtId++;\\n        group.debts[debtId] = Debt(_name, _debitor, _creditor, _amount, false);\\n\\n        balances[_debitor][_groupId] -= int256(_amount);\\n        balances[_creditor][_groupId] += int256(_amount);\\n\\n        emit DebtAdded(_groupId, debtId, _debitor, _creditor, _amount, _name);\\n    }\\n\\n    function addExpense(uint256 _groupId, address[] memory _creditors, uint256[] memory _amounts, string memory _name) external onlyMember(_groupId) {\\n        require(_creditors.length == _amounts.length , \\\"Lenghts do not match\\\");\\n        for(uint32 i=0; i<_creditors.length; i++){\\n            _addDebt(_groupId, msg.sender, _creditors[i], _amounts[i], _name);\\n        }\\n    }\\n\\n    function findDebts(uint256 _groupId, address _person) external view onlyMember(_groupId) returns (PaymentToDo[] memory){\\n        return paymentsToDo[_person][_groupId];\\n    }\\n\\n    function payDebtsForGroup(uint256 _groupId) external {\\n        //TODO USDC INTEGRATION\\n        PaymentToDo[]memory ptd = paymentsToDo[msg.sender][_groupId];\\n        for(uint32 i=0; i<ptd.length;i++) {\\n            balances[msg.sender][_groupId] += int256(ptd[i].amount);\\n            balances[ptd[i].creditor][_groupId] -= int256(ptd[i].amount);\\n        }\\n    }\\n\\n    function settleGroupDebts(uint256 _groupId) payable external onlyMember(_groupId) {\\n        Group storage group = groups[_groupId];\\n        address[] memory members = group.members;\\n        address[] memory debtors = new address[](members.length);\\n        address[] memory creditors = new address[](members.length);\\n        uint256 debtorCount = 0;\\n        uint256 creditorCount = 0;\\n        mapping(address => mapping(uint256 => int256)) storage balances_temp = balances;\\n\\n        // Separate debtors and creditors\\n        for (uint256 i = 0; i < members.length; i++) {\\n            int256 balance = balances_temp[members[i]][_groupId];\\n            if (balance < 0) {\\n                debtors[debtorCount++] = members[i];\\n            } else if (balance > 0) {\\n                creditors[creditorCount++] = members[i];\\n            }\\n        }\\n\\n        sortAddresses(debtors, debtorCount, _groupId, true);\\n        sortAddresses(creditors, creditorCount, _groupId, false);\\n\\n        uint256 debtorIndex = 0;\\n        uint256 creditorIndex = 0;\\n        while (debtorIndex < debtorCount && creditorIndex < creditorCount) {\\n            address debtor = debtors[debtorIndex];\\n            address creditor = creditors[creditorIndex];\\n            uint256 amount = uint256(min(-int128(balances_temp[debtor][_groupId]), int128(balances_temp[creditor][_groupId])));\\n\\n            paymentsToDo[debtor][_groupId].push(PaymentToDo(creditor, amount));\\n\\n            balances_temp[debtor][_groupId] += int256(amount);\\n            balances_temp[creditor][_groupId] -= int256(amount);\\n\\n            emit DebtSettled(_groupId, debtor, creditor, amount);\\n\\n            if (balances_temp[debtor][_groupId] == 0) debtorIndex++;\\n            if (balances_temp[creditor][_groupId] == 0) creditorIndex++;\\n\\n        }\\n    }\\n\\n    function sortAddresses(address[] memory arr, uint256 count, uint256 _groupId, bool isDebtors) internal view {\\n        for (uint256 i = 0; i < count - 1; i++) {\\n            for (uint256 j = 0; j < count - i - 1; j++) {\\n                if (isDebtors) {\\n                    if (balances[arr[j]][_groupId] > balances[arr[j + 1]][_groupId]) {\\n                        (arr[j], arr[j + 1]) = (arr[j + 1], arr[j]);\\n                    }\\n                } else {\\n                    if (balances[arr[j]][_groupId] < balances[arr[j + 1]][_groupId]) {\\n                        (arr[j], arr[j + 1]) = (arr[j + 1], arr[j]);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    event DebtSettled(uint256 indexed groupId, address indexed debtor, address indexed creditor, uint256 amount);\\n}\\n\",\"keccak256\":\"0xb4e2703203dcf251b4b59e67c335f8b99f6b7fc7b64b3f6852ee498d960b9f75\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001b5760016000556118a690816100218239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c80631432aa7c1461103f57806338514b7e14610fe75780634fece28e14610a8657806368a21ef3146109445780638db66ed81461081c57806396324bd4146107465780639e6d683014610650578063aa22bd1b1461054b578063bf8e917614610435578063c56f5bba146102fe578063cbf1304d146102b65763cfbe575c146100a057600080fd5b346102b15760403660031901126102b15767ffffffffffffffff6004358181116102b1576100d290369060040161128f565b6024358281116102b1576100ea903690600401611221565b91600054918260005260019160209483865260406000209284860180871161029b576000558051908382116101dc57819061012586546112fe565b601f8111610260575b508890601f83116001146101fd576000926101f2575b5050600019600383901b1c191690851b1783555b8383019080519283116101dc57600160401b83116101dc57869082548484558085106101bf575b500190600052856000208460005b8481106101a4578888836003890155604051908152f35b83516001600160a01b0316838201559288019286910161018d565b6101d6908460005285846000209182019101611387565b3861017f565b634e487b7160e01b600052604160045260246000fd5b015190503880610144565b90879350601f19831691876000528a6000209260005b8c82821061024a5750508411610231575b505050811b018355610158565b015160001960f88460031b161c19169055388080610224565b8385015186558b97909501949384019301610213565b61028b90876000528a600020601f850160051c8101918c8610610291575b601f0160051c0190611387565b3861012e565b909150819061027e565b634e487b7160e01b600052601160045260246000fd5b600080fd5b346102b15760403660031901126102b1576001600160a01b036102d76111f5565b16600052600360205260406000206024356000526020526020604060002054604051908152f35b346102b1576020806003193601126102b157600435336000526004825260406000208160005282526040600020918254610337816111dd565b9361034560405195866111bb565b8185526000908152828120838087015b8484106104005787878360005b83519063ffffffff8116918210156103fe5781836103836103f994886113f5565b5101513360005260039081865260406000208760005286526103ab6040600020918254611544565b9055846103b883896113f5565b510151916001600160a01b03906103cf90896113f5565b515116600052845260406000208560005284526103f2604060002091825461152b565b9055611829565b610362565b005b6001916002916040516104128161119f565b848060a01b03865416815284860154838201528152019201920191908490610355565b346102b1576020806003193601126102b1576004353360005260029081835260406000208054156105115760005b81548110156103fe57806104788492846112e6565b929054600393841b1c14610496575b6104919150611378565b610463565b336000528486526104bf6104ae8260406000206112e6565b8154906000199060031b1b19169055565b8360005260019182875282604060002001928354600160401b8110156101dc57610491946104f092820181556112e6565b81929154911b9060018060a01b03821b809233901b16911916179055610487565b60405162461bcd60e51b81526004810185905260126024820152714e6f2070656e64696e6720696e766974657360701b6044820152606490fd5b346102b15760403660031901126102b15760043561056761120b565b9061057a6105753383611409565b61139e565b60018060a01b0380921660005260209060048252604060002090600052815260406000208054916105aa836111dd565b926105b860405194856111bb565b8084528184018093600052826000206000915b83831061061c575050505060405192818401908285525180915260408401929160005b8281106105fb5785850386f35b835180518816865282015185830152604090940193928101926001016105ee565b6002856001926040999799516106318161119f565b8b865416815284860154838201528152019201920191909593956105cb565b346102b15760403660031901126102b15760043561066c61120b565b6106796105753384611409565b61068381836114c0565b1580610735575b156106e4576001600160a01b0316600090815260026020526040902080549190600160401b8310156101dc57826106c99160016103fe950181556112e6565b90919082549060031b600019811b9283911b16911916179055565b60405162461bcd60e51b8152602060048201526024808201527f4d656d62657220697320616c726561647920696e202870656e64696e672920676044820152630726f75760e41b6064820152608490fd5b506107408183611409565b1561068a565b346102b1576020806003193601126102b1576004356000526001908181526040600020906040519160009381549061077d826112fe565b808652918181169081156107fe57506001146107c6575b50506003906107a8846107be9603856111bb565b0154604051938493604085526040850190611338565b918301520390f35b60008381528481209096505b8287106107eb57505050928201810192806107a8610794565b80548688018601529584019581016107d2565b60ff1916858701525050151560051b830182019350806107a8610794565b346102b15760403660031901126102b15760043561083861120b565b6108456105753384611409565b61084f8183611409565b6108ff576001600160a01b03166000908152600260205260408120915b825491828110156103fe578161088282866112e6565b919054600392831b1c146108a2575061089c919250611378565b9061086c565b91506000199283810190811161029b576108cf926108c36106c992876112e6565b9054911b1c91856112e6565b815480156108e95701906108e66104ae83836112e6565b55005b634e487b7160e01b600052603160045260246000fd5b60405162461bcd60e51b815260206004820152601a60248201527f4d656d62657220697320616c726561647920696e2067726f75700000000000006044820152606490fd5b346102b15760803660031901126102b15760043561096061120b565b60443560643567ffffffffffffffff81116102b15761098390369060040161128f565b916109916105753386611409565b6001600160a01b0381163314610a4b578115610a06576109b18185611409565b156109c1576103fe933390611560565b60405162461bcd60e51b815260206004820152601f60248201527f4372656469746f72206d75737420626520612067726f7570206d656d626572006044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527f416d6f756e74206d75737420626520706f7369746976650000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601360248201527221b0b73737ba1037bbb2903cb7bab939b2b63360691b6044820152606490fd5b60203660031901126102b157610aa161057533600435611409565b600435600052600160205260016040600020016040518082602082945493848152019060005260206000209260005b818110610fc5575050610ae5925003826111bb565b610aef815161183e565b90610afa815161183e565b9060009060009060005b8151811015610bac57610b73906001600160a01b0380610b2483866113f5565b51166000526003602052604060002060043560005260205260406000205460008112600014610b785750610b5882856113f5565b5116610b6d610b6687611378565b96896113f5565b52611378565b610b04565b600012610b86575b50611378565b610b9082856113f5565b5116610ba5610b9e86611378565b95886113f5565b5287610b80565b505090916000915b600019840184811161029b57831015610cbc5760005b610bd4848661151e565b600019810190811161029b57811015610cab576001600160a01b03610bf982886113f5565b5116600052600360205260406000206004356000526020526040600020549060018101811161029b57610c63916001600160a01b03610c3b600184018a6113f5565b51166000526003602052604060002060043560005260205260406000205412610c6857611378565b610bca565b6001600160a01b03610c7d60018301896113f5565b51166001600160a01b03610c91838a6113f5565b5116610ca0600184018a6113f5565b52610b6d82896113f5565b5091610cb690611378565b91610bb4565b600084865b600019840184811161029b57831015610d865760005b610ce1848661151e565b600019810190811161029b57811015610d75576001600160a01b03610d0682886113f5565b5116600052600360205260406000206004356000526020526040600020549060018101811161029b57610d70916001600160a01b03610d48600184018a6113f5565b51166000526003602052604060002060043560005260205260406000205413610c6857611378565b610cd7565b5091610d8090611378565b91610cc1565b8385916000916000945b80841080610fbc575b156103fe576001600160a01b03610db085856113f5565b51166001600160a01b03610dc488886113f5565b51169080600052600360205260406000206004356000526020526040600020546f7fffffffffffffffffffffffffffffff1981600f0b1461029b578260005260036020526040600020600435600052602052604060002054600f0b90600f0b600003600f0b90808212600014610fb557505b8160005260046020526040600020600435600052602052604060002060405191610e5f8361119f565b848352806020840152815492600160401b8410156101dc5760018401808455841015610f9f5760016020879587956000528160002090831b0192828060a01b038151166bffffffffffffffffffffffff60a01b855416178455015191015581600052600360205260406000206004356000526020526040600020610ee4828254611544565b905582600052600360205260406000206004356000526020526040600020610f0d82825461152b565b90556040519081527f16c014bb6d1c6cc25e4d9c2ffff2d5052bc083462038999100ead76edf97bee0602060043592a46000526003602052604060002060043560005260205260406000205415610f8f575b60005260036020526040600020600435600052602052604060002054610d905794610f8990611378565b94610d90565b93610f9990611378565b93610f5f565b634e487b7160e01b600052603260045260246000fd5b9050610e36565b50818610610d99565b84546001600160a01b0316835260019485019486945060209093019201610ad0565b346102b15760403660031901126102b1576110006111f5565b6001600160a01b03166000908152600260205260409020805460243591908210156102b157602091611031916112e6565b90546040519160031b1c8152f35b346102b15760803660031901126102b15767ffffffffffffffff6004356024358281116102b157611074903690600401611221565b91604435908082116102b157366023830112156102b15781600401359061109a826111dd565b926110a860405194856111bb565b82845260209260248486019160051b830101913683116102b1576024859101915b83831061118f57505050506064359081116102b1576110ec90369060040161128f565b906110fa6105753386611409565b8451835103611154575060005b84519063ffffffff8116918210156103fe5761114f9161114a9084906111416001600160a01b03611138838c6113f5565b511691886113f5565b51903389611560565b611829565b611107565b6064906040519062461bcd60e51b825260048201526014602482015273098cadcced0e8e640c8de40dcdee840dac2e8c6d60631b6044820152fd5b82358152918101918591016110c9565b6040810190811067ffffffffffffffff8211176101dc57604052565b90601f8019910116810190811067ffffffffffffffff8211176101dc57604052565b67ffffffffffffffff81116101dc5760051b60200190565b600435906001600160a01b03821682036102b157565b602435906001600160a01b03821682036102b157565b81601f820112156102b157803591611238836111dd565b9261124660405194856111bb565b808452602092838086019260051b8201019283116102b1578301905b828210611270575050505090565b81356001600160a01b03811681036102b1578152908301908301611262565b81601f820112156102b15780359067ffffffffffffffff82116101dc57604051926112c4601f8401601f1916602001856111bb565b828452602083830101116102b157816000926020809301838601378301015290565b8054821015610f9f5760005260206000200190600090565b90600182811c9216801561132e575b602083101461131857565b634e487b7160e01b600052602260045260246000fd5b91607f169161130d565b919082519283825260005b848110611364575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201611343565b600019811461029b5760010190565b818110611392575050565b60008155600101611387565b156113a557565b60405162461bcd60e51b815260206004820152602260248201527f596f7520617265206e6f742061206d656d626572206f6620746869732067726f604482015261075760f41b6064820152608490fd5b8051821015610f9f5760209160051b010190565b60009081526001916020838152836040842001604051918281835491828152019286528186209186905b8282106114a257505050509061144d8186949303826111bb565b83945b61145d575b505050905090565b805185101561149d576001600160a01b038061147987846113f5565b5116908316146114955761148e839495611378565b9493611450565b505091505090565b611455565b83546001600160a01b03168552938401939288019290880190611433565b60005b6001600160a01b0383166000908152600260205260409081902054821015611515576114f38284926000206112e6565b90549060031b1c1461150d5761150890611378565b6114c3565b505050600190565b50505050600090565b9190820391821161029b57565b8181039291600013801582851316918412161761029b57565b9190916000838201938412911290801582169115161761029b57565b91929092826000526001602052604060002093600385019485549561158487611378565b90556040519060a082019082821067ffffffffffffffff8311176101dc5760029160405288835260018060a01b038416602084015260018060a01b03851660408401528560608401526000608084015287600052016020526040600020815180519067ffffffffffffffff82116101dc576115ff83546112fe565b601f81116117f7575b50602090601f8311600114611760577f12c11720876a43af6b84ee69759066f8ae75366a16b8b46ed317390702e240ef97969593836117509694608094600494600092611755575b50508160011b916000199060031b1c19161781555b6001810160018060a01b03602086015116906bffffffffffffffffffffffff60a01b9182825416179055600282019060018060a01b03604087015116908254161790556060840151600382015501910151151560ff8019835416911617905560018060a01b038116600052600360205260406000208660005260205260406000206116f185825461152b565b905560018060a01b03831660005260036020526040600020866000526020526040600020611720858254611544565b9055604080516001600160a01b039485168152602081019590955260609085018190529216968392830190611338565b0390a4565b015190503880611650565b908360005260206000209160005b601f19851681106117df5750936001846080946004947f12c11720876a43af6b84ee69759066f8ae75366a16b8b46ed317390702e240ef9c9b9a986117509a98601f198116106117c6575b505050811b018155611665565b015160001960f88460031b161c191690553880806117b9565b9192602060018192868501518155019401920161176e565b61182390846000526020600020601f850160051c8101916020861061029157601f0160051c0190611387565b38611608565b63ffffffff80911690811461029b5760010190565b90611848826111dd565b61185560405191826111bb565b8281528092611866601f19916111dd565b019060203691013756fea26469706673582212206d7198a623e0ad02078f8fa4b2c2440077c07a3f0ec92d411066c9f56c6307c764736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c80631432aa7c1461103f57806338514b7e14610fe75780634fece28e14610a8657806368a21ef3146109445780638db66ed81461081c57806396324bd4146107465780639e6d683014610650578063aa22bd1b1461054b578063bf8e917614610435578063c56f5bba146102fe578063cbf1304d146102b65763cfbe575c146100a057600080fd5b346102b15760403660031901126102b15767ffffffffffffffff6004358181116102b1576100d290369060040161128f565b6024358281116102b1576100ea903690600401611221565b91600054918260005260019160209483865260406000209284860180871161029b576000558051908382116101dc57819061012586546112fe565b601f8111610260575b508890601f83116001146101fd576000926101f2575b5050600019600383901b1c191690851b1783555b8383019080519283116101dc57600160401b83116101dc57869082548484558085106101bf575b500190600052856000208460005b8481106101a4578888836003890155604051908152f35b83516001600160a01b0316838201559288019286910161018d565b6101d6908460005285846000209182019101611387565b3861017f565b634e487b7160e01b600052604160045260246000fd5b015190503880610144565b90879350601f19831691876000528a6000209260005b8c82821061024a5750508411610231575b505050811b018355610158565b015160001960f88460031b161c19169055388080610224565b8385015186558b97909501949384019301610213565b61028b90876000528a600020601f850160051c8101918c8610610291575b601f0160051c0190611387565b3861012e565b909150819061027e565b634e487b7160e01b600052601160045260246000fd5b600080fd5b346102b15760403660031901126102b1576001600160a01b036102d76111f5565b16600052600360205260406000206024356000526020526020604060002054604051908152f35b346102b1576020806003193601126102b157600435336000526004825260406000208160005282526040600020918254610337816111dd565b9361034560405195866111bb565b8185526000908152828120838087015b8484106104005787878360005b83519063ffffffff8116918210156103fe5781836103836103f994886113f5565b5101513360005260039081865260406000208760005286526103ab6040600020918254611544565b9055846103b883896113f5565b510151916001600160a01b03906103cf90896113f5565b515116600052845260406000208560005284526103f2604060002091825461152b565b9055611829565b610362565b005b6001916002916040516104128161119f565b848060a01b03865416815284860154838201528152019201920191908490610355565b346102b1576020806003193601126102b1576004353360005260029081835260406000208054156105115760005b81548110156103fe57806104788492846112e6565b929054600393841b1c14610496575b6104919150611378565b610463565b336000528486526104bf6104ae8260406000206112e6565b8154906000199060031b1b19169055565b8360005260019182875282604060002001928354600160401b8110156101dc57610491946104f092820181556112e6565b81929154911b9060018060a01b03821b809233901b16911916179055610487565b60405162461bcd60e51b81526004810185905260126024820152714e6f2070656e64696e6720696e766974657360701b6044820152606490fd5b346102b15760403660031901126102b15760043561056761120b565b9061057a6105753383611409565b61139e565b60018060a01b0380921660005260209060048252604060002090600052815260406000208054916105aa836111dd565b926105b860405194856111bb565b8084528184018093600052826000206000915b83831061061c575050505060405192818401908285525180915260408401929160005b8281106105fb5785850386f35b835180518816865282015185830152604090940193928101926001016105ee565b6002856001926040999799516106318161119f565b8b865416815284860154838201528152019201920191909593956105cb565b346102b15760403660031901126102b15760043561066c61120b565b6106796105753384611409565b61068381836114c0565b1580610735575b156106e4576001600160a01b0316600090815260026020526040902080549190600160401b8310156101dc57826106c99160016103fe950181556112e6565b90919082549060031b600019811b9283911b16911916179055565b60405162461bcd60e51b8152602060048201526024808201527f4d656d62657220697320616c726561647920696e202870656e64696e672920676044820152630726f75760e41b6064820152608490fd5b506107408183611409565b1561068a565b346102b1576020806003193601126102b1576004356000526001908181526040600020906040519160009381549061077d826112fe565b808652918181169081156107fe57506001146107c6575b50506003906107a8846107be9603856111bb565b0154604051938493604085526040850190611338565b918301520390f35b60008381528481209096505b8287106107eb57505050928201810192806107a8610794565b80548688018601529584019581016107d2565b60ff1916858701525050151560051b830182019350806107a8610794565b346102b15760403660031901126102b15760043561083861120b565b6108456105753384611409565b61084f8183611409565b6108ff576001600160a01b03166000908152600260205260408120915b825491828110156103fe578161088282866112e6565b919054600392831b1c146108a2575061089c919250611378565b9061086c565b91506000199283810190811161029b576108cf926108c36106c992876112e6565b9054911b1c91856112e6565b815480156108e95701906108e66104ae83836112e6565b55005b634e487b7160e01b600052603160045260246000fd5b60405162461bcd60e51b815260206004820152601a60248201527f4d656d62657220697320616c726561647920696e2067726f75700000000000006044820152606490fd5b346102b15760803660031901126102b15760043561096061120b565b60443560643567ffffffffffffffff81116102b15761098390369060040161128f565b916109916105753386611409565b6001600160a01b0381163314610a4b578115610a06576109b18185611409565b156109c1576103fe933390611560565b60405162461bcd60e51b815260206004820152601f60248201527f4372656469746f72206d75737420626520612067726f7570206d656d626572006044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527f416d6f756e74206d75737420626520706f7369746976650000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601360248201527221b0b73737ba1037bbb2903cb7bab939b2b63360691b6044820152606490fd5b60203660031901126102b157610aa161057533600435611409565b600435600052600160205260016040600020016040518082602082945493848152019060005260206000209260005b818110610fc5575050610ae5925003826111bb565b610aef815161183e565b90610afa815161183e565b9060009060009060005b8151811015610bac57610b73906001600160a01b0380610b2483866113f5565b51166000526003602052604060002060043560005260205260406000205460008112600014610b785750610b5882856113f5565b5116610b6d610b6687611378565b96896113f5565b52611378565b610b04565b600012610b86575b50611378565b610b9082856113f5565b5116610ba5610b9e86611378565b95886113f5565b5287610b80565b505090916000915b600019840184811161029b57831015610cbc5760005b610bd4848661151e565b600019810190811161029b57811015610cab576001600160a01b03610bf982886113f5565b5116600052600360205260406000206004356000526020526040600020549060018101811161029b57610c63916001600160a01b03610c3b600184018a6113f5565b51166000526003602052604060002060043560005260205260406000205412610c6857611378565b610bca565b6001600160a01b03610c7d60018301896113f5565b51166001600160a01b03610c91838a6113f5565b5116610ca0600184018a6113f5565b52610b6d82896113f5565b5091610cb690611378565b91610bb4565b600084865b600019840184811161029b57831015610d865760005b610ce1848661151e565b600019810190811161029b57811015610d75576001600160a01b03610d0682886113f5565b5116600052600360205260406000206004356000526020526040600020549060018101811161029b57610d70916001600160a01b03610d48600184018a6113f5565b51166000526003602052604060002060043560005260205260406000205413610c6857611378565b610cd7565b5091610d8090611378565b91610cc1565b8385916000916000945b80841080610fbc575b156103fe576001600160a01b03610db085856113f5565b51166001600160a01b03610dc488886113f5565b51169080600052600360205260406000206004356000526020526040600020546f7fffffffffffffffffffffffffffffff1981600f0b1461029b578260005260036020526040600020600435600052602052604060002054600f0b90600f0b600003600f0b90808212600014610fb557505b8160005260046020526040600020600435600052602052604060002060405191610e5f8361119f565b848352806020840152815492600160401b8410156101dc5760018401808455841015610f9f5760016020879587956000528160002090831b0192828060a01b038151166bffffffffffffffffffffffff60a01b855416178455015191015581600052600360205260406000206004356000526020526040600020610ee4828254611544565b905582600052600360205260406000206004356000526020526040600020610f0d82825461152b565b90556040519081527f16c014bb6d1c6cc25e4d9c2ffff2d5052bc083462038999100ead76edf97bee0602060043592a46000526003602052604060002060043560005260205260406000205415610f8f575b60005260036020526040600020600435600052602052604060002054610d905794610f8990611378565b94610d90565b93610f9990611378565b93610f5f565b634e487b7160e01b600052603260045260246000fd5b9050610e36565b50818610610d99565b84546001600160a01b0316835260019485019486945060209093019201610ad0565b346102b15760403660031901126102b1576110006111f5565b6001600160a01b03166000908152600260205260409020805460243591908210156102b157602091611031916112e6565b90546040519160031b1c8152f35b346102b15760803660031901126102b15767ffffffffffffffff6004356024358281116102b157611074903690600401611221565b91604435908082116102b157366023830112156102b15781600401359061109a826111dd565b926110a860405194856111bb565b82845260209260248486019160051b830101913683116102b1576024859101915b83831061118f57505050506064359081116102b1576110ec90369060040161128f565b906110fa6105753386611409565b8451835103611154575060005b84519063ffffffff8116918210156103fe5761114f9161114a9084906111416001600160a01b03611138838c6113f5565b511691886113f5565b51903389611560565b611829565b611107565b6064906040519062461bcd60e51b825260048201526014602482015273098cadcced0e8e640c8de40dcdee840dac2e8c6d60631b6044820152fd5b82358152918101918591016110c9565b6040810190811067ffffffffffffffff8211176101dc57604052565b90601f8019910116810190811067ffffffffffffffff8211176101dc57604052565b67ffffffffffffffff81116101dc5760051b60200190565b600435906001600160a01b03821682036102b157565b602435906001600160a01b03821682036102b157565b81601f820112156102b157803591611238836111dd565b9261124660405194856111bb565b808452602092838086019260051b8201019283116102b1578301905b828210611270575050505090565b81356001600160a01b03811681036102b1578152908301908301611262565b81601f820112156102b15780359067ffffffffffffffff82116101dc57604051926112c4601f8401601f1916602001856111bb565b828452602083830101116102b157816000926020809301838601378301015290565b8054821015610f9f5760005260206000200190600090565b90600182811c9216801561132e575b602083101461131857565b634e487b7160e01b600052602260045260246000fd5b91607f169161130d565b919082519283825260005b848110611364575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201611343565b600019811461029b5760010190565b818110611392575050565b60008155600101611387565b156113a557565b60405162461bcd60e51b815260206004820152602260248201527f596f7520617265206e6f742061206d656d626572206f6620746869732067726f604482015261075760f41b6064820152608490fd5b8051821015610f9f5760209160051b010190565b60009081526001916020838152836040842001604051918281835491828152019286528186209186905b8282106114a257505050509061144d8186949303826111bb565b83945b61145d575b505050905090565b805185101561149d576001600160a01b038061147987846113f5565b5116908316146114955761148e839495611378565b9493611450565b505091505090565b611455565b83546001600160a01b03168552938401939288019290880190611433565b60005b6001600160a01b0383166000908152600260205260409081902054821015611515576114f38284926000206112e6565b90549060031b1c1461150d5761150890611378565b6114c3565b505050600190565b50505050600090565b9190820391821161029b57565b8181039291600013801582851316918412161761029b57565b9190916000838201938412911290801582169115161761029b57565b91929092826000526001602052604060002093600385019485549561158487611378565b90556040519060a082019082821067ffffffffffffffff8311176101dc5760029160405288835260018060a01b038416602084015260018060a01b03851660408401528560608401526000608084015287600052016020526040600020815180519067ffffffffffffffff82116101dc576115ff83546112fe565b601f81116117f7575b50602090601f8311600114611760577f12c11720876a43af6b84ee69759066f8ae75366a16b8b46ed317390702e240ef97969593836117509694608094600494600092611755575b50508160011b916000199060031b1c19161781555b6001810160018060a01b03602086015116906bffffffffffffffffffffffff60a01b9182825416179055600282019060018060a01b03604087015116908254161790556060840151600382015501910151151560ff8019835416911617905560018060a01b038116600052600360205260406000208660005260205260406000206116f185825461152b565b905560018060a01b03831660005260036020526040600020866000526020526040600020611720858254611544565b9055604080516001600160a01b039485168152602081019590955260609085018190529216968392830190611338565b0390a4565b015190503880611650565b908360005260206000209160005b601f19851681106117df5750936001846080946004947f12c11720876a43af6b84ee69759066f8ae75366a16b8b46ed317390702e240ef9c9b9a986117509a98601f198116106117c6575b505050811b018155611665565b015160001960f88460031b161c191690553880806117b9565b9192602060018192868501518155019401920161176e565b61182390846000526020600020601f850160051c8101916020861061029157601f0160051c0190611387565b38611608565b63ffffffff80911690811461029b5760010190565b90611848826111dd565b61185560405191826111bb565b8281528092611866601f19916111dd565b019060203691013756fea26469706673582212206d7198a623e0ad02078f8fa4b2c2440077c07a3f0ec92d411066c9f56c6307c764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 33,
        "contract": "contracts/Splitwiser.sol:Splitwiser",
        "label": "nextGroupId",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 38,
        "contract": "contracts/Splitwiser.sol:Splitwiser",
        "label": "groups",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Group)25_storage)"
      },
      {
        "astId": 43,
        "contract": "contracts/Splitwiser.sol:Splitwiser",
        "label": "pendingGroupInvites",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 49,
        "contract": "contracts/Splitwiser.sol:Splitwiser",
        "label": "balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_int256))"
      },
      {
        "astId": 57,
        "contract": "contracts/Splitwiser.sol:Splitwiser",
        "label": "paymentsToDo",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(PaymentToDo)30_storage)dyn_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PaymentToDo)30_storage)dyn_storage": {
        "base": "t_struct(PaymentToDo)30_storage",
        "encoding": "dynamic_array",
        "label": "struct Splitwiser.PaymentToDo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(PaymentToDo)30_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct Splitwiser.PaymentToDo[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_struct(PaymentToDo)30_storage)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_int256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => int256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_int256)"
      },
      "t_mapping(t_uint256,t_array(t_struct(PaymentToDo)30_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Splitwiser.PaymentToDo[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(PaymentToDo)30_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_uint256,t_struct(Debt)12_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Splitwiser.Debt)",
        "numberOfBytes": "32",
        "value": "t_struct(Debt)12_storage"
      },
      "t_mapping(t_uint256,t_struct(Group)25_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Splitwiser.Group)",
        "numberOfBytes": "32",
        "value": "t_struct(Group)25_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Debt)12_storage": {
        "encoding": "inplace",
        "label": "struct Splitwiser.Debt",
        "members": [
          {
            "astId": 3,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 5,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "debtor",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 7,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "creditor",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 9,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 11,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "paid",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Group)25_storage": {
        "encoding": "inplace",
        "label": "struct Splitwiser.Group",
        "members": [
          {
            "astId": 14,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "groupName",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 17,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "members",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 22,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "debts",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(Debt)12_storage)"
          },
          {
            "astId": 24,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "nextDebtId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(PaymentToDo)30_storage": {
        "encoding": "inplace",
        "label": "struct Splitwiser.PaymentToDo",
        "members": [
          {
            "astId": 27,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "creditor",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 29,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}