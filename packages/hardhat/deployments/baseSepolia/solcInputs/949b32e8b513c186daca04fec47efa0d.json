{
  "language": "Solidity",
  "sources": {
    "contracts/Splitwiser.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.0;\n\ncontract Splitwiser {\n    struct Debt {\n        string name;\n        address debtor;\n        address creditor;\n        uint256 amount;\n        bool paid;\n    }\n\n    struct Group {\n        string groupName;\n        address[] members;\n        mapping(uint256 => Debt) debts; // A mapping from debtId to actual Debt\n        uint256 nextDebtId;\n    }\n\n    // (Optimization) Data structure to keep track of what a person owe and\n    // in what group.\n    struct PaymentToDo {\n        address creditor;\n        uint256 amount;\n    }\n\n    uint256 private nextGroupId = 1; // Keep track of the next groupId\n    mapping(uint256 => Group) public groups;\n    mapping(address => uint256[]) public pendingGroupInvites; // Database of pending user invitations to a group(s)\n\n    // (Optimization) A mapping address => groupId => balance\n    // to keep track of user balance in smart contract\n    mapping(address => mapping(uint256 => int256)) public balances;\n\n    // (Optimization) A mapping of address => groupId => payments ( creditor + amt )\n    // to keep track of what a person owe and in what group. Faster and cheaper than iterating all groups.\n    mapping(address => mapping(uint256 => PaymentToDo[])) private paymentsToDo;\n\n    // Event to notify users if a new debt is added\n    event DebtAdded(uint256 indexed groupId, uint256 indexed debtId, address indexed debtor, address creditor, uint256 amount, string name);\n\n    modifier onlyMember(uint256 _groupId) {\n        require(isMember(_groupId, msg.sender), \"You are not a member of this group\");\n        _;\n    }\n\n    function getGroupName(uint256 _groupId) external view returns (string memory) {\n        require(_groupId < nextGroupId, \"Group does not exists.\");\n        return groups[_groupId].groupName;\n    }\n\n    function acceptInvite(uint256 _groupId) public {\n        uint256[] storage invitations = pendingGroupInvites[msg.sender];\n        require(invitations.length > 0, \"No pending invites\");\n        for(uint i = 0; i < invitations.length; i++) {\n            if(invitations[i] == _groupId){\n                delete pendingGroupInvites[msg.sender][i];\n                _addMember(_groupId, msg.sender);\n            }\n        }\n    }\n\n    function _addMember(uint256 _groupId, address _member) internal {\n        groups[_groupId].members.push(msg.sender);\n        balances[_member][_groupId] = 0;\n    }\n\n    function getUserGroups() external view returns (uint256[] memory) {\n        uint256 count = 0;\n        uint256[] memory tempGroups = new uint256[](nextGroupId - 1);\n        for (uint256 i = 1; i < nextGroupId; i++) {\n            if (isMember(i, msg.sender)) {\n                tempGroups[count++] = i;\n            }\n        }\n\n        uint256[] memory userGroups = new uint256[](count);\n        for (uint256 j = 0; j < count; j++) {\n            userGroups[j] = tempGroups[j];\n        }\n\n        return userGroups;\n    }\n\n    function createGroup(string memory _name, address[] memory _members) external returns (uint256) {\n        uint256 currentGroupId = nextGroupId;\n        Group storage newGroup = groups[currentGroupId];\n        nextGroupId = nextGroupId + 1;\n        newGroup.groupName = _name;\n\n        for (uint i = 0; i < _members.length; i++) {\n            _addMember(currentGroupId, _members[i]);\n        }\n        _addMember(currentGroupId, msg.sender);\n\n        newGroup.nextDebtId = 1;\n        return currentGroupId;\n    }\n\n    function isMember(uint256 _groupId, address _member) internal view returns (bool) {\n        address[] memory members = groups[_groupId].members;\n        for (uint i = 0; i < members.length; i++) {\n            if (members[i] == _member) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function isPending(uint256 _groupId, address _member) internal view returns (bool) {\n        for(uint i = 0; i < pendingGroupInvites[_member].length; i++) {\n            if (pendingGroupInvites[_member][i] == _groupId) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function inviteMember(uint256 _groupId, address _invited) public onlyMember(_groupId) {\n        require(!isPending(_groupId, _invited) && !isMember(_groupId, _invited), \"Member is already in (pending) group\");\n        pendingGroupInvites[_invited].push(_groupId);\n    }\n\n    function removeInvite(uint256 _groupId, address _invited) public onlyMember(_groupId) {\n        require(!isMember(_groupId, _invited), \"Member is already in group\");\n        uint256[] storage invites = pendingGroupInvites[_invited];\n        for (uint i = 0; i < invites.length; i++) {\n            if (invites[i] == _groupId) {\n                invites[i] = invites[invites.length - 1];\n                invites.pop();\n                break;\n            }\n        }\n    }\n\n    function addDebt(uint256 _groupId, address _creditor, uint256 _amount, string memory _name) external onlyMember(_groupId) {\n        require(_creditor != msg.sender, \"Cannot owe yourself\");\n        require(_amount > 0, \"Amount must be positive\");\n        require(isMember(_groupId, _creditor), \"Creditor must be a group member\");\n\n        _addDebt(_groupId, msg.sender, _creditor, _amount, _name);\n    }\n\n    function _addDebt(uint256 _groupId, address _debitor, address _creditor, uint256 _amount, string memory _name) internal {\n        Group storage group = groups[_groupId];\n        uint256 debtId = group.nextDebtId++;\n        group.debts[debtId] = Debt(_name, _debitor, _creditor, _amount, false);\n\n        balances[_debitor][_groupId] -= int256(_amount);\n        balances[_creditor][_groupId] += int256(_amount);\n\n        emit DebtAdded(_groupId, debtId, _debitor, _creditor, _amount, _name);\n    }\n\n    function addExpense(uint256 _groupId, address[] memory _creditors, uint256[] memory _amounts, string memory _name) external onlyMember(_groupId) {\n        require(_creditors.length == _amounts.length , \"Lenghts do not match\");\n        for(uint32 i=0; i<_creditors.length; i++){\n            _addDebt(_groupId, msg.sender, _creditors[i], _amounts[i], _name);\n        }\n    }\n\n    function findDebts(uint256 _groupId, address _person) external view onlyMember(_groupId) returns (PaymentToDo[] memory){\n        return paymentsToDo[_person][_groupId];\n    }\n\n    function payDebtsForGroup(uint256 _groupId) external {\n        //TODO USDC INTEGRATION\n        PaymentToDo[]memory ptd = paymentsToDo[msg.sender][_groupId];\n        for(uint32 i=0; i<ptd.length;i++) {\n            balances[msg.sender][_groupId] += int256(ptd[i].amount);\n            balances[ptd[i].creditor][_groupId] -= int256(ptd[i].amount);\n        }\n    }\n\n    function settleGroupDebts(uint256 _groupId) payable external onlyMember(_groupId) {\n        Group storage group = groups[_groupId];\n        address[] memory members = group.members;\n        address[] memory debtors = new address[](members.length);\n        address[] memory creditors = new address[](members.length);\n        uint256 debtorCount = 0;\n        uint256 creditorCount = 0;\n        mapping(address => mapping(uint256 => int256)) storage balances_temp = balances;\n\n        // Separate debtors and creditors\n        for (uint256 i = 0; i < members.length; i++) {\n            int256 balance = balances_temp[members[i]][_groupId];\n            if (balance < 0) {\n                debtors[debtorCount++] = members[i];\n            } else if (balance > 0) {\n                creditors[creditorCount++] = members[i];\n            }\n        }\n\n        sortAddresses(debtors, debtorCount, _groupId, true);\n        sortAddresses(creditors, creditorCount, _groupId, false);\n\n        uint256 debtorIndex = 0;\n        uint256 creditorIndex = 0;\n        while (debtorIndex < debtorCount && creditorIndex < creditorCount) {\n            address debtor = debtors[debtorIndex];\n            address creditor = creditors[creditorIndex];\n            uint256 amount = uint256(min(-int128(balances_temp[debtor][_groupId]), int128(balances_temp[creditor][_groupId])));\n\n            paymentsToDo[debtor][_groupId].push(PaymentToDo(creditor, amount));\n\n            balances_temp[debtor][_groupId] += int256(amount);\n            balances_temp[creditor][_groupId] -= int256(amount);\n\n            emit DebtSettled(_groupId, debtor, creditor, amount);\n\n            if (balances_temp[debtor][_groupId] == 0) debtorIndex++;\n            if (balances_temp[creditor][_groupId] == 0) creditorIndex++;\n\n        }\n    }\n\n    function sortAddresses(address[] memory arr, uint256 count, uint256 _groupId, bool isDebtors) internal view {\n        for (uint256 i = 0; i < count - 1; i++) {\n            for (uint256 j = 0; j < count - i - 1; j++) {\n                if (isDebtors) {\n                    if (balances[arr[j]][_groupId] > balances[arr[j + 1]][_groupId]) {\n                        (arr[j], arr[j + 1]) = (arr[j + 1], arr[j]);\n                    }\n                } else {\n                    if (balances[arr[j]][_groupId] < balances[arr[j + 1]][_groupId]) {\n                        (arr[j], arr[j + 1]) = (arr[j + 1], arr[j]);\n                    }\n                }\n            }\n        }\n    }\n\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    event DebtSettled(uint256 indexed groupId, address indexed debtor, address indexed creditor, uint256 amount);\n}\n"
    }
  },
  "settings": {
    "viaIR": true,
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}