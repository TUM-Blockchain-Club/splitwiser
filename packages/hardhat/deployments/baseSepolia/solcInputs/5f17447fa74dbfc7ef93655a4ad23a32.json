{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "contracts/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "contracts/Splitwiser.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract Splitwiser {\n    struct Debt {\n        string name;\n        address debtor;\n        address creditor;\n        uint256 amount;\n        bool paid;\n    }\n\n    struct Group {\n        string groupName;\n        address[] members;\n        mapping(uint256 => Debt) debts; // A mapping from debtId to actual Debt\n        uint256 nextDebtId;\n        address token;\n    }\n\n    // (Optimization) Data structure to keep track of what a person owe and\n    // in what group.\n    struct PaymentToDo {\n        address creditor;\n        uint256 amount;\n    }\n\n    event GroupCreated(uint256 indexed groupId, address creator);\n\n    uint256 private nextGroupId = 1; // Keep track of the next groupId\n    mapping(uint256 => Group) public groups;\n    mapping(address => uint256[]) public pendingGroupInvites; // Database of pending user invitations to a group(s)\n\n    // (Optimization) A mapping address => groupId => balance\n    // to keep track of user balance in smart contract\n    mapping(address => mapping(uint256 => int256)) public balances;\n    mapping(uint256 => mapping(address => int256)) public balances_new;\n    // (Optimization) A mapping of address => groupId => payments ( creditor + amt )\n    // to keep track of what a person owe and in what group. Faster and cheaper than iterating all groups.\n    mapping(address => mapping(uint256 => PaymentToDo[])) private paymentsToDo;\n\n    // Event to notify users if a new debt is added\n    event DebtAdded(uint256 indexed groupId, uint256 indexed debtId, address indexed debtor, address creditor, uint256 amount, string name);\n\n    modifier onlyMember(uint256 _groupId) {\n        require(isMember(_groupId, msg.sender), \"You are not a member of this group\");\n        _;\n    }\n\n    function getGroupName(uint256 _groupId) external view returns (string memory) {\n        require(_groupId < nextGroupId, \"Group does not exists.\");\n        return groups[_groupId].groupName;\n    }\n\n    function acceptInvite(uint256 _groupId) public {\n        uint256[] storage invitations = pendingGroupInvites[msg.sender];\n        require(invitations.length > 0, \"No pending invites\");\n        for(uint i = 0; i < invitations.length; i++) {\n            if(invitations[i] == _groupId){\n                delete pendingGroupInvites[msg.sender][i];\n                _addMember(_groupId, msg.sender);\n            }\n        }\n    }\n\n    function _addMember(uint256 _groupId, address _member) internal {\n        groups[_groupId].members.push(_member);\n        balances[_member][_groupId] = 0;\n    }\n\n    function getUserGroups() external view returns (uint256[] memory) {\n        uint256 count = 0;\n        uint256[] memory tempGroups = new uint256[](nextGroupId - 1);\n        for (uint256 i = 1; i < nextGroupId; i++) {\n            if (isMember(i, msg.sender)) {\n                tempGroups[count++] = i;\n            }\n        }\n\n        uint256[] memory userGroups = new uint256[](count);\n        for (uint256 j = 0; j < count; j++) {\n            userGroups[j] = tempGroups[j];\n        }\n\n        return userGroups;\n    }\n\n    function createGroup(string memory _name, address[] memory _members, address _token) external {\n        uint256 currentGroupId = nextGroupId;\n        Group storage newGroup = groups[currentGroupId];\n        nextGroupId = nextGroupId + 1;\n        newGroup.groupName = _name;\n\n        for (uint i = 0; i < _members.length; i++) {\n            _addMember(currentGroupId, _members[i]);\n        }\n        _addMember(currentGroupId, msg.sender);\n\n        newGroup.nextDebtId = 1;\n        newGroup.token = _token;\n        emit GroupCreated(currentGroupId, msg.sender);\n    }\n\n    function isMember(uint256 _groupId, address _member) internal view returns (bool) {\n        address[] memory members = groups[_groupId].members;\n        for (uint i = 0; i < members.length; i++) {\n            if (members[i] == _member) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function isPending(uint256 _groupId, address _member) internal view returns (bool) {\n        for(uint i = 0; i < pendingGroupInvites[_member].length; i++) {\n            if (pendingGroupInvites[_member][i] == _groupId) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function inviteMember(uint256 _groupId, address _invited) public onlyMember(_groupId) {\n        require(!isPending(_groupId, _invited) && !isMember(_groupId, _invited), \"Member is already in (pending) group\");\n        pendingGroupInvites[_invited].push(_groupId);\n    }\n\n    function removeInvite(uint256 _groupId, address _invited) public onlyMember(_groupId) {\n        require(!isMember(_groupId, _invited), \"Member is already in group\");\n        uint256[] storage invites = pendingGroupInvites[_invited];\n        for (uint i = 0; i < invites.length; i++) {\n            if (invites[i] == _groupId) {\n                invites[i] = invites[invites.length - 1];\n                invites.pop();\n                break;\n            }\n        }\n    }\n\n    function addDebts(uint256 _groupId, address[] memory _debtors, address _creditor, uint256[] memory _amounts, string memory _name) external onlyMember(_groupId) {\n        require(isMember(_groupId, _creditor), \"Creditor must be a group member\");\n        for(uint32 i=0; i<_debtors.length; i++){\n            require(isMember(_groupId, _debtors[i]), \"Debtor must be a group member\");\n            _addDebt(_groupId, _debtors[i], _creditor, _amounts[i], _name);\n        }\n    }\n\n    function _addDebt(uint256 _groupId, address _debitor, address _creditor, uint256 _amount, string memory _name) internal {\n        Group storage group = groups[_groupId];\n        uint256 debtId = group.nextDebtId++;\n        group.debts[debtId] = Debt(_name, _debitor, _creditor, _amount, false);\n\n        balances[_debitor][_groupId] -= int256(_amount);\n        balances[_creditor][_groupId] += int256(_amount);\n\n        emit DebtAdded(_groupId, debtId, _debitor, _creditor, _amount, _name);\n    }\n\n    function addExpense(uint256 _groupId, address[] memory _creditors, uint256[] memory _amounts, string memory _name) external onlyMember(_groupId) {\n        require(_creditors.length == _amounts.length , \"Lenghts do not match\");\n        for(uint32 i=0; i<_creditors.length; i++){\n            _addDebt(_groupId, msg.sender, _creditors[i], _amounts[i], _name);\n        }\n    }\n    }"
    }
  },
  "settings": {
    "viaIR": true,
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}