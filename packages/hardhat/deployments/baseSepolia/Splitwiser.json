{
  "address": "0x280481362f3a49F860A315D1e3dd7bc0eA713732",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "debtId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "debtor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creditor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "DebtAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "GroupCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        }
      ],
      "name": "acceptInvite",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_debtors",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_creditor",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "addDebts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_creditors",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "addExpense",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances_new",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "createGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        }
      ],
      "name": "getGroupName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUserGroups",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "groups",
      "outputs": [
        {
          "internalType": "string",
          "name": "groupName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "nextDebtId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_invited",
          "type": "address"
        }
      ],
      "name": "inviteMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pendingGroupInvites",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_invited",
          "type": "address"
        }
      ],
      "name": "removeInvite",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1f7adf7bbced2abf2c2ae994d00ecabf977c8bc8193417806f9cddae2023df98",
  "receipt": {
    "to": null,
    "from": "0x02136f1EBe65969D10a018aa370FaAa7d35a1a65",
    "contractAddress": "0x280481362f3a49F860A315D1e3dd7bc0eA713732",
    "transactionIndex": 9,
    "gasUsed": "1173876",
    "logsBloom": "0x
    "blockHash": "0x2659a276812a4ee0660fdcb236eb71cfb47b51e660a5789076f6a7dea54a46b3",
    "transactionHash": "0x1f7adf7bbced2abf2c2ae994d00ecabf977c8bc8193417806f9cddae2023df98",
    "logs": [],
    "blockNumber": 12585217,
    "cumulativeGasUsed": "2104902",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 11,
  "solcInputHash": "5f17447fa74dbfc7ef93655a4ad23a32",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"debtId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creditor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"DebtAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"GroupCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"}],\"name\":\"acceptInvite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_debtors\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_creditor\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"addDebts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_creditors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"addExpense\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances_new\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"createGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"}],\"name\":\"getGroupName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserGroups\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"groups\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"groupName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nextDebtId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_invited\",\"type\":\"address\"}],\"name\":\"inviteMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingGroupInvites\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_invited\",\"type\":\"address\"}],\"name\":\"removeInvite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Splitwiser.sol\":\"Splitwiser\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/Splitwiser.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Splitwiser {\\n    struct Debt {\\n        string name;\\n        address debtor;\\n        address creditor;\\n        uint256 amount;\\n        bool paid;\\n    }\\n\\n    struct Group {\\n        string groupName;\\n        address[] members;\\n        mapping(uint256 => Debt) debts; // A mapping from debtId to actual Debt\\n        uint256 nextDebtId;\\n        address token;\\n    }\\n\\n    // (Optimization) Data structure to keep track of what a person owe and\\n    // in what group.\\n    struct PaymentToDo {\\n        address creditor;\\n        uint256 amount;\\n    }\\n\\n    event GroupCreated(uint256 indexed groupId, address creator);\\n\\n    uint256 private nextGroupId = 1; // Keep track of the next groupId\\n    mapping(uint256 => Group) public groups;\\n    mapping(address => uint256[]) public pendingGroupInvites; // Database of pending user invitations to a group(s)\\n\\n    // (Optimization) A mapping address => groupId => balance\\n    // to keep track of user balance in smart contract\\n    mapping(address => mapping(uint256 => int256)) public balances;\\n    mapping(uint256 => mapping(address => int256)) public balances_new;\\n    // (Optimization) A mapping of address => groupId => payments ( creditor + amt )\\n    // to keep track of what a person owe and in what group. Faster and cheaper than iterating all groups.\\n    mapping(address => mapping(uint256 => PaymentToDo[])) private paymentsToDo;\\n\\n    // Event to notify users if a new debt is added\\n    event DebtAdded(uint256 indexed groupId, uint256 indexed debtId, address indexed debtor, address creditor, uint256 amount, string name);\\n\\n    modifier onlyMember(uint256 _groupId) {\\n        require(isMember(_groupId, msg.sender), \\\"You are not a member of this group\\\");\\n        _;\\n    }\\n\\n    function getGroupName(uint256 _groupId) external view returns (string memory) {\\n        require(_groupId < nextGroupId, \\\"Group does not exists.\\\");\\n        return groups[_groupId].groupName;\\n    }\\n\\n    function acceptInvite(uint256 _groupId) public {\\n        uint256[] storage invitations = pendingGroupInvites[msg.sender];\\n        require(invitations.length > 0, \\\"No pending invites\\\");\\n        for(uint i = 0; i < invitations.length; i++) {\\n            if(invitations[i] == _groupId){\\n                delete pendingGroupInvites[msg.sender][i];\\n                _addMember(_groupId, msg.sender);\\n            }\\n        }\\n    }\\n\\n    function _addMember(uint256 _groupId, address _member) internal {\\n        groups[_groupId].members.push(_member);\\n        balances[_member][_groupId] = 0;\\n    }\\n\\n    function getUserGroups() external view returns (uint256[] memory) {\\n        uint256 count = 0;\\n        uint256[] memory tempGroups = new uint256[](nextGroupId - 1);\\n        for (uint256 i = 1; i < nextGroupId; i++) {\\n            if (isMember(i, msg.sender)) {\\n                tempGroups[count++] = i;\\n            }\\n        }\\n\\n        uint256[] memory userGroups = new uint256[](count);\\n        for (uint256 j = 0; j < count; j++) {\\n            userGroups[j] = tempGroups[j];\\n        }\\n\\n        return userGroups;\\n    }\\n\\n    function createGroup(string memory _name, address[] memory _members, address _token) external {\\n        uint256 currentGroupId = nextGroupId;\\n        Group storage newGroup = groups[currentGroupId];\\n        nextGroupId = nextGroupId + 1;\\n        newGroup.groupName = _name;\\n\\n        for (uint i = 0; i < _members.length; i++) {\\n            _addMember(currentGroupId, _members[i]);\\n        }\\n        _addMember(currentGroupId, msg.sender);\\n\\n        newGroup.nextDebtId = 1;\\n        newGroup.token = _token;\\n        emit GroupCreated(currentGroupId, msg.sender);\\n    }\\n\\n    function isMember(uint256 _groupId, address _member) internal view returns (bool) {\\n        address[] memory members = groups[_groupId].members;\\n        for (uint i = 0; i < members.length; i++) {\\n            if (members[i] == _member) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function isPending(uint256 _groupId, address _member) internal view returns (bool) {\\n        for(uint i = 0; i < pendingGroupInvites[_member].length; i++) {\\n            if (pendingGroupInvites[_member][i] == _groupId) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function inviteMember(uint256 _groupId, address _invited) public onlyMember(_groupId) {\\n        require(!isPending(_groupId, _invited) && !isMember(_groupId, _invited), \\\"Member is already in (pending) group\\\");\\n        pendingGroupInvites[_invited].push(_groupId);\\n    }\\n\\n    function removeInvite(uint256 _groupId, address _invited) public onlyMember(_groupId) {\\n        require(!isMember(_groupId, _invited), \\\"Member is already in group\\\");\\n        uint256[] storage invites = pendingGroupInvites[_invited];\\n        for (uint i = 0; i < invites.length; i++) {\\n            if (invites[i] == _groupId) {\\n                invites[i] = invites[invites.length - 1];\\n                invites.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function addDebts(uint256 _groupId, address[] memory _debtors, address _creditor, uint256[] memory _amounts, string memory _name) external onlyMember(_groupId) {\\n        require(isMember(_groupId, _creditor), \\\"Creditor must be a group member\\\");\\n        for(uint32 i=0; i<_debtors.length; i++){\\n            require(isMember(_groupId, _debtors[i]), \\\"Debtor must be a group member\\\");\\n            _addDebt(_groupId, _debtors[i], _creditor, _amounts[i], _name);\\n        }\\n    }\\n\\n    function _addDebt(uint256 _groupId, address _debitor, address _creditor, uint256 _amount, string memory _name) internal {\\n        Group storage group = groups[_groupId];\\n        uint256 debtId = group.nextDebtId++;\\n        group.debts[debtId] = Debt(_name, _debitor, _creditor, _amount, false);\\n\\n        balances[_debitor][_groupId] -= int256(_amount);\\n        balances[_creditor][_groupId] += int256(_amount);\\n\\n        emit DebtAdded(_groupId, debtId, _debitor, _creditor, _amount, _name);\\n    }\\n\\n    function addExpense(uint256 _groupId, address[] memory _creditors, uint256[] memory _amounts, string memory _name) external onlyMember(_groupId) {\\n        require(_creditors.length == _amounts.length , \\\"Lenghts do not match\\\");\\n        for(uint32 i=0; i<_creditors.length; i++){\\n            _addDebt(_groupId, msg.sender, _creditors[i], _amounts[i], _name);\\n        }\\n    }\\n    }\",\"keccak256\":\"0x89d12793ffdd022ceb43368ec41e5f0d70ac7bb78a84556127659833087ae7ef\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 198,
        "contract": "contracts/Splitwiser.sol:Splitwiser",
        "label": "nextGroupId",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 203,
        "contract": "contracts/Splitwiser.sol:Splitwiser",
        "label": "groups",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Group)184_storage)"
      },
      {
        "astId": 208,
        "contract": "contracts/Splitwiser.sol:Splitwiser",
        "label": "pendingGroupInvites",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 214,
        "contract": "contracts/Splitwiser.sol:Splitwiser",
        "label": "balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_int256))"
      },
      {
        "astId": 220,
        "contract": "contracts/Splitwiser.sol:Splitwiser",
        "label": "balances_new",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_int256))"
      },
      {
        "astId": 228,
        "contract": "contracts/Splitwiser.sol:Splitwiser",
        "label": "paymentsToDo",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(PaymentToDo)189_storage)dyn_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PaymentToDo)189_storage)dyn_storage": {
        "base": "t_struct(PaymentToDo)189_storage",
        "encoding": "dynamic_array",
        "label": "struct Splitwiser.PaymentToDo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_int256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(PaymentToDo)189_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct Splitwiser.PaymentToDo[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_struct(PaymentToDo)189_storage)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_int256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => int256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_int256)"
      },
      "t_mapping(t_uint256,t_array(t_struct(PaymentToDo)189_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Splitwiser.PaymentToDo[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(PaymentToDo)189_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_int256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => int256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_int256)"
      },
      "t_mapping(t_uint256,t_struct(Debt)169_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Splitwiser.Debt)",
        "numberOfBytes": "32",
        "value": "t_struct(Debt)169_storage"
      },
      "t_mapping(t_uint256,t_struct(Group)184_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Splitwiser.Group)",
        "numberOfBytes": "32",
        "value": "t_struct(Group)184_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Debt)169_storage": {
        "encoding": "inplace",
        "label": "struct Splitwiser.Debt",
        "members": [
          {
            "astId": 160,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 162,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "debtor",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 164,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "creditor",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 166,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 168,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "paid",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Group)184_storage": {
        "encoding": "inplace",
        "label": "struct Splitwiser.Group",
        "members": [
          {
            "astId": 171,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "groupName",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 174,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "members",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 179,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "debts",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(Debt)169_storage)"
          },
          {
            "astId": 181,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "nextDebtId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 183,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "token",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(PaymentToDo)189_storage": {
        "encoding": "inplace",
        "label": "struct Splitwiser.PaymentToDo",
        "members": [
          {
            "astId": 186,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "creditor",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 188,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}