{
  "address": "0x7c2f5F56e2C8e35543e63ec2d5212fDB4aef5d9C",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "debtId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "debtor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creditor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "DebtAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "debtor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creditor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DebtSettled",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        }
      ],
      "name": "acceptInvite",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_creditor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "addDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_creditors",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "addExpense",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "createGroup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_person",
          "type": "address"
        }
      ],
      "name": "findDebts",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "creditor",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Splitwiser.PaymentToDo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        }
      ],
      "name": "getGroupName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUserGroups",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "groups",
      "outputs": [
        {
          "internalType": "string",
          "name": "groupName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "nextDebtId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_invited",
          "type": "address"
        }
      ],
      "name": "inviteMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        }
      ],
      "name": "payDebtsForGroup",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pendingGroupInvites",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_invited",
          "type": "address"
        }
      ],
      "name": "removeInvite",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        }
      ],
      "name": "settleGroupDebts",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x96a6deed484660154609b7ae7e7faadb20c7f01204b792842beb6f31615c7470",
  "receipt": {
    "to": null,
    "from": "0xc9b89C20e15F18589005E08ADf6c079A19C58ab6",
    "contractAddress": "0x7c2f5F56e2C8e35543e63ec2d5212fDB4aef5d9C",
    "transactionIndex": 3,
    "gasUsed": "1659995",
    "logsBloom": "0x
    "blockHash": "0x6d7c82027c92a02b90f46a969279b8572cb71da444dd9257a3a20b489375df23",
    "transactionHash": "0x96a6deed484660154609b7ae7e7faadb20c7f01204b792842beb6f31615c7470",
    "logs": [],
    "blockNumber": 12562273,
    "cumulativeGasUsed": "1904720",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 9,
  "solcInputHash": "01175433b9dd92985b19aa4d6cf8fd6e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"debtId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creditor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"DebtAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creditor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DebtSettled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"}],\"name\":\"acceptInvite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_creditor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"addDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_creditors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"addExpense\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"createGroup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_person\",\"type\":\"address\"}],\"name\":\"findDebts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creditor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Splitwiser.PaymentToDo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"}],\"name\":\"getGroupName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserGroups\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"groups\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"groupName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nextDebtId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_invited\",\"type\":\"address\"}],\"name\":\"inviteMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"}],\"name\":\"payDebtsForGroup\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingGroupInvites\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_invited\",\"type\":\"address\"}],\"name\":\"removeInvite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"}],\"name\":\"settleGroupDebts\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Splitwiser.sol\":\"Splitwiser\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/Splitwiser.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\ncontract Splitwiser {\\n    struct Debt {\\n        string name;\\n        address debtor;\\n        address creditor;\\n        uint256 amount;\\n        bool paid;\\n    }\\n\\n    struct Group {\\n        string groupName;\\n        address[] members;\\n        mapping(uint256 => Debt) debts; // A mapping from debtId to actual Debt\\n        uint256 nextDebtId;\\n        address token;\\n    }\\n\\n    // (Optimization) Data structure to keep track of what a person owe and\\n    // in what group.\\n    struct PaymentToDo {\\n        address creditor;\\n        uint256 amount;\\n    }\\n\\n    uint256 private nextGroupId = 1; // Keep track of the next groupId\\n    mapping(uint256 => Group) public groups;\\n    mapping(address => uint256[]) public pendingGroupInvites; // Database of pending user invitations to a group(s)\\n\\n    // (Optimization) A mapping address => groupId => balance\\n    // to keep track of user balance in smart contract\\n    mapping(address => mapping(uint256 => int256)) public balances;\\n\\n    // (Optimization) A mapping of address => groupId => payments ( creditor + amt )\\n    // to keep track of what a person owe and in what group. Faster and cheaper than iterating all groups.\\n    mapping(address => mapping(uint256 => PaymentToDo[])) private paymentsToDo;\\n\\n    // Event to notify users if a new debt is added\\n    event DebtAdded(uint256 indexed groupId, uint256 indexed debtId, address indexed debtor, address creditor, uint256 amount, string name);\\n\\n    modifier onlyMember(uint256 _groupId) {\\n        require(isMember(_groupId, msg.sender), \\\"You are not a member of this group\\\");\\n        _;\\n    }\\n\\n    function getGroupName(uint256 _groupId) external view returns (string memory) {\\n        require(_groupId < nextGroupId, \\\"Group does not exists.\\\");\\n        return groups[_groupId].groupName;\\n    }\\n\\n    function acceptInvite(uint256 _groupId) public {\\n        uint256[] storage invitations = pendingGroupInvites[msg.sender];\\n        require(invitations.length > 0, \\\"No pending invites\\\");\\n        for(uint i = 0; i < invitations.length; i++) {\\n            if(invitations[i] == _groupId){\\n                delete pendingGroupInvites[msg.sender][i];\\n                _addMember(_groupId, msg.sender);\\n            }\\n        }\\n    }\\n\\n    function _addMember(uint256 _groupId, address _member) internal {\\n        groups[_groupId].members.push(msg.sender);\\n        balances[_member][_groupId] = 0;\\n    }\\n\\n    function getUserGroups() external view returns (uint256[] memory) {\\n        uint256 count = 0;\\n        uint256[] memory tempGroups = new uint256[](nextGroupId - 1);\\n        for (uint256 i = 1; i < nextGroupId; i++) {\\n            if (isMember(i, msg.sender)) {\\n                tempGroups[count++] = i;\\n            }\\n        }\\n\\n        uint256[] memory userGroups = new uint256[](count);\\n        for (uint256 j = 0; j < count; j++) {\\n            userGroups[j] = tempGroups[j];\\n        }\\n\\n        return userGroups;\\n    }\\n\\n    function createGroup(string memory _name, address[] memory _members, address _token) external returns (uint256) {\\n        uint256 currentGroupId = nextGroupId;\\n        Group storage newGroup = groups[currentGroupId];\\n        nextGroupId = nextGroupId + 1;\\n        newGroup.groupName = _name;\\n\\n        for (uint i = 0; i < _members.length; i++) {\\n            _addMember(currentGroupId, _members[i]);\\n        }\\n        _addMember(currentGroupId, msg.sender);\\n\\n        newGroup.nextDebtId = 1;\\n        newGroup.token = _token;\\n\\n        return currentGroupId;\\n    }\\n\\n    function isMember(uint256 _groupId, address _member) internal view returns (bool) {\\n        address[] memory members = groups[_groupId].members;\\n        for (uint i = 0; i < members.length; i++) {\\n            if (members[i] == _member) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function isPending(uint256 _groupId, address _member) internal view returns (bool) {\\n        for(uint i = 0; i < pendingGroupInvites[_member].length; i++) {\\n            if (pendingGroupInvites[_member][i] == _groupId) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function inviteMember(uint256 _groupId, address _invited) public onlyMember(_groupId) {\\n        require(!isPending(_groupId, _invited) && !isMember(_groupId, _invited), \\\"Member is already in (pending) group\\\");\\n        pendingGroupInvites[_invited].push(_groupId);\\n    }\\n\\n    function removeInvite(uint256 _groupId, address _invited) public onlyMember(_groupId) {\\n        require(!isMember(_groupId, _invited), \\\"Member is already in group\\\");\\n        uint256[] storage invites = pendingGroupInvites[_invited];\\n        for (uint i = 0; i < invites.length; i++) {\\n            if (invites[i] == _groupId) {\\n                invites[i] = invites[invites.length - 1];\\n                invites.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function addDebt(uint256 _groupId, address _creditor, uint256 _amount, string memory _name) external onlyMember(_groupId) {\\n        require(_creditor != msg.sender, \\\"Cannot owe yourself\\\");\\n        require(_amount > 0, \\\"Amount must be positive\\\");\\n        require(isMember(_groupId, _creditor), \\\"Creditor must be a group member\\\");\\n\\n        _addDebt(_groupId, msg.sender, _creditor, _amount, _name);\\n    }\\n\\n    function _addDebt(uint256 _groupId, address _debitor, address _creditor, uint256 _amount, string memory _name) internal {\\n        Group storage group = groups[_groupId];\\n        uint256 debtId = group.nextDebtId++;\\n        group.debts[debtId] = Debt(_name, _debitor, _creditor, _amount, false);\\n\\n        balances[_debitor][_groupId] -= int256(_amount);\\n        balances[_creditor][_groupId] += int256(_amount);\\n\\n        emit DebtAdded(_groupId, debtId, _debitor, _creditor, _amount, _name);\\n    }\\n\\n    function addExpense(uint256 _groupId, address[] memory _creditors, uint256[] memory _amounts, string memory _name) external onlyMember(_groupId) {\\n        require(_creditors.length == _amounts.length , \\\"Lenghts do not match\\\");\\n        for(uint32 i=0; i<_creditors.length; i++){\\n            _addDebt(_groupId, msg.sender, _creditors[i], _amounts[i], _name);\\n        }\\n    }\\n\\n    function findDebts(uint256 _groupId, address _person) external view onlyMember(_groupId) returns (PaymentToDo[] memory){\\n        return paymentsToDo[_person][_groupId];\\n    }\\n\\n    function payDebtsForGroup(uint256 _groupId) external payable {\\n        int256 totalAmount = balances[msg.sender][_groupId];\\n        require(totalAmount < 0, \\\"You do not owe anything in this group\\\");\\n        IERC20 token = IERC20(groups[_groupId].token);\\n        require(token.transferFrom(msg.sender, address(this), uint256(-totalAmount)), \\\"Transfer failed\\\");\\n        PaymentToDo[]memory ptd = paymentsToDo[msg.sender][_groupId];\\n        balances[msg.sender][_groupId] = 0;\\n\\n        for(uint32 i=0; i<ptd.length;i++) {\\n            require(token.transfer(ptd[i].creditor, ptd[i].amount), \\\"Transfer to recipient failed\\\");\\n            balances[ptd[i].creditor][_groupId] -= int256(ptd[i].amount);\\n        }\\n    }\\n\\n    function settleGroupDebts(uint256 _groupId) payable external onlyMember(_groupId) {\\n        Group storage group = groups[_groupId];\\n        address[] memory members = group.members;\\n        address[] memory debtors = new address[](members.length);\\n        address[] memory creditors = new address[](members.length);\\n        uint256 debtorCount = 0;\\n        uint256 creditorCount = 0;\\n        mapping(address => mapping(uint256 => int256)) storage balances_temp = balances;\\n\\n        // Separate debtors and creditors\\n        for (uint256 i = 0; i < members.length; i++) {\\n            int256 balance = balances_temp[members[i]][_groupId];\\n            if (balance < 0) {\\n                debtors[debtorCount++] = members[i];\\n            } else if (balance > 0) {\\n                creditors[creditorCount++] = members[i];\\n            }\\n        }\\n\\n        sortAddresses(debtors, debtorCount, _groupId, true);\\n        sortAddresses(creditors, creditorCount, _groupId, false);\\n\\n        uint256 debtorIndex = 0;\\n        uint256 creditorIndex = 0;\\n        while (debtorIndex < debtorCount && creditorIndex < creditorCount) {\\n            address debtor = debtors[debtorIndex];\\n            address creditor = creditors[creditorIndex];\\n            uint256 amount = uint256(min(-int128(balances_temp[debtor][_groupId]), int128(balances_temp[creditor][_groupId])));\\n\\n            paymentsToDo[debtor][_groupId].push(PaymentToDo(creditor, amount));\\n\\n            balances_temp[debtor][_groupId] += int256(amount);\\n            balances_temp[creditor][_groupId] -= int256(amount);\\n\\n            emit DebtSettled(_groupId, debtor, creditor, amount);\\n\\n            if (balances_temp[debtor][_groupId] == 0) debtorIndex++;\\n            if (balances_temp[creditor][_groupId] == 0) creditorIndex++;\\n\\n        }\\n    }\\n\\n    function sortAddresses(address[] memory arr, uint256 count, uint256 _groupId, bool isDebtors) internal view {\\n        for (uint256 i = 0; i < count - 1; i++) {\\n            for (uint256 j = 0; j < count - i - 1; j++) {\\n                if (isDebtors) {\\n                    if (balances[arr[j]][_groupId] > balances[arr[j + 1]][_groupId]) {\\n                        (arr[j], arr[j + 1]) = (arr[j + 1], arr[j]);\\n                    }\\n                } else {\\n                    if (balances[arr[j]][_groupId] < balances[arr[j + 1]][_groupId]) {\\n                        (arr[j], arr[j + 1]) = (arr[j + 1], arr[j]);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    event DebtSettled(uint256 indexed groupId, address indexed debtor, address indexed creditor, uint256 amount);\\n}\\n\",\"keccak256\":\"0x2a3ef6fd218860a4ab2a62636aebc27d70f002a9a1b2f0fd168a301d92b4d9ec\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001b576001600055611cab90816100218239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c80631432aa7c1461130e57806329a6ca32146112825780633168a1291461107e57806338514b7e146110265780634fece28e14610ad257806368a21ef3146109905780638db66ed81461086857806396324bd4146108045780639e6d6830146106f8578063aa22bd1b146105f3578063bf8e917614610523578063c56f5bba14610203578063cbf1304d146101bb5763d8314ffc146100b657600080fd5b346101b65760003660031901126101b6576000805460001981018181116101a0576100e090611786565b600191825b81811061016a5750506100f783611786565b9260005b818110610141575050506040519060208083018184528451809152816040850195019160005b82811061012e5785870386f35b8351875295810195928101928401610121565b80610151610162928597956117b8565b5161015c82866117b8565b526116ed565b9391936100fb565b6101849061017b95939533826117cc565b61018c576116ed565b9391936100e5565b8061015c610199866116ed565b95886117b8565b634e487b7160e01b600052601160045260246000fd5b600080fd5b346101b65760403660031901126101b6576001600160a01b036101dc6114c4565b16600052600360205260406000206024356000526020526020604060002054604051908152f35b6020806003193601126101b657600435903360005260039182825260406000208160005282526040600020549060008212156104d057600081815260018085526040909120600401546001600160a01b039081169591949190600160ff1b85146101a0576000604051956323b872dd60e01b8752336004880152602496308882015260449183038282015285818b8160649687925af1908115610446576000916104b3575b5015610481573360005260048552604060002086600052855260406000209687546102d2816114ac565b986102e06040519a8b61148a565b818a5260009081528781208b898c015b8a8585106104545750505050505033600052848652604060002087600052865260006040812055886000905b61032257005b885163ffffffff821690811015610452578b888b8682610350868c61034782876117b8565b515116946117b8565b510151916000604051958694859363a9059cbb60e01b855260048501528a8401525af190811561044657600091610419575b50156103d7579081866103a68a61039c6103d1968f6117b8565b510151928d6117b8565b51511660005287895260406000208a60005289526103ca6040600020918254611938565b9055611c48565b8961031c565b60405162461bcd60e51b815260048101899052601c818501527f5472616e7366657220746f20726563697069656e74206661696c656400000000818601528590fd5b6104399150893d8b1161043f575b610431818361148a565b810190611c5d565b8d610382565b503d610427565b6040513d6000823e3d90fd5b005b6002916040516104638161146e565b8b865416815284860154838201528152019201920191908c906102f0565b6e151c985b9cd9995c8819985a5b1959608a1b8591600f896040519462461bcd60e51b86526004860152840152820152fd5b6104ca9150863d881161043f57610431818361148a565b8a6102a8565b60405162461bcd60e51b815260048101849052602560248201527f596f7520646f206e6f74206f776520616e797468696e6720696e207468697320604482015264067726f75760dc1b6064820152608490fd5b346101b6576020806003193601126101b65760043590336000526002908181526040600020928354156105b95760005b845481101561045257808261056b61057c93886115f5565b90549060031b1c14610581576116ed565b610553565b336000528484526105aa6105998260406000206115f5565b8154906000199060031b1b19169055565b6105b433846116fc565b6116ed565b60405162461bcd60e51b81526004810183905260126024820152714e6f2070656e64696e6720696e766974657360701b6044820152606490fd5b346101b65760403660031901126101b65760043561060f6114da565b9061062261061d33836117cc565b611883565b60018060a01b038092166000526020906004825260406000209060005281526040600020805491610652836114ac565b92610660604051948561148a565b8084528184018093600052826000206000915b8383106106c4575050505060405192818401908285525180915260408401929160005b8281106106a35785850386f35b83518051881686528201518583015260409094019392810192600101610696565b6002856001926040999799516106d98161146e565b8b86541681528486015483820152815201920192019190959395610673565b346101b65760403660031901126101b6576004356107146114da565b61072161061d33846117cc565b61072b81836118da565b15806107f3575b156107a2576001600160a01b0316600090815260026020526040902080549190600160401b83101561078c5782610771916001610452950181556115f5565b90919082549060031b600019811b9283911b16911916179055565b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b8152602060048201526024808201527f4d656d62657220697320616c726561647920696e202870656e64696e672920676044820152630726f75760e41b6064820152608490fd5b506107fe81836117cc565b15610732565b346101b65760203660031901126101b6576004356000526001602052610859604060002061083181611647565b90600381015490600460018060a01b03910154166040519384936060855260608501906115b5565b91602084015260408301520390f35b346101b65760403660031901126101b6576004356108846114da565b61089161061d33846117cc565b61089b81836117cc565b61094b576001600160a01b03166000908152600260205260408120915b8254918281101561045257816108ce82866115f5565b919054600392831b1c146108ee57506108e89192506116ed565b906108b8565b9150600019928381019081116101a05761091b9261090f61077192876115f5565b9054911b1c91856115f5565b8154801561093557019061093261059983836115f5565b55005b634e487b7160e01b600052603160045260246000fd5b60405162461bcd60e51b815260206004820152601a60248201527f4d656d62657220697320616c726561647920696e2067726f75700000000000006044820152606490fd5b346101b65760803660031901126101b6576004356109ac6114da565b60443560643567ffffffffffffffff81116101b6576109cf90369060040161155e565b916109dd61061d33866117cc565b6001600160a01b0381163314610a97578115610a52576109fd81856117cc565b15610a0d5761045293339061196d565b60405162461bcd60e51b815260206004820152601f60248201527f4372656469746f72206d75737420626520612067726f7570206d656d626572006044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527f416d6f756e74206d75737420626520706f7369746976650000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601360248201527221b0b73737ba1037bbb2903cb7bab939b2b63360691b6044820152606490fd5b60203660031901126101b657610aed61061d336004356117cc565b600435600052600160205260016040600020016040518082602082945493848152019060005260206000209260005b818110611004575050610b319250038261148a565b610b3b8151611786565b90610b468151611786565b9060009060009060005b8151811015610beb57610bb9906001600160a01b0380610b7083866117b8565b51166000526003602052604060002060043560005260205260406000205460008112600014610bbe5750610ba482856117b8565b511661015c610bb2876116ed565b96896117b8565b610b50565b600012610bcc575b506116ed565b610bd682856117b8565b5116610be4610199866116ed565b5287610bc6565b505090916000915b60001984018481116101a057831015610cfb5760005b610c138486611779565b60001981019081116101a057811015610cea576001600160a01b03610c3882886117b8565b511660005260036020526040600020600435600052602052604060002054906001810181116101a057610ca2916001600160a01b03610c7a600184018a6117b8565b51166000526003602052604060002060043560005260205260406000205412610ca7576116ed565b610c09565b6001600160a01b03610cbc60018301896117b8565b51166001600160a01b03610cd0838a6117b8565b5116610cdf600184018a6117b8565b5261015c82896117b8565b5091610cf5906116ed565b91610bf3565b600084865b60001984018481116101a057831015610dc55760005b610d208486611779565b60001981019081116101a057811015610db4576001600160a01b03610d4582886117b8565b511660005260036020526040600020600435600052602052604060002054906001810181116101a057610daf916001600160a01b03610d87600184018a6117b8565b51166000526003602052604060002060043560005260205260406000205413610ca7576116ed565b610d16565b5091610dbf906116ed565b91610d00565b8385916000916000945b80841080610ffb575b15610452576001600160a01b03610def85856117b8565b51166001600160a01b03610e0388886117b8565b51169080600052600360205260406000206004356000526020526040600020546f7fffffffffffffffffffffffffffffff1981600f0b146101a0578260005260036020526040600020600435600052602052604060002054600f0b90600f0b600003600f0b90808212600014610ff457505b8160005260046020526040600020600435600052602052604060002060405191610e9e8361146e565b848352806020840152815492600160401b84101561078c5760018401808455841015610fde5760016020879587956000528160002090831b0192828060a01b038151166bffffffffffffffffffffffff60a01b855416178455015191015581600052600360205260406000206004356000526020526040600020610f23828254611951565b905582600052600360205260406000206004356000526020526040600020610f4c828254611938565b90556040519081527f16c014bb6d1c6cc25e4d9c2ffff2d5052bc083462038999100ead76edf97bee0602060043592a46000526003602052604060002060043560005260205260406000205415610fce575b60005260036020526040600020600435600052602052604060002054610dcf5794610fc8906116ed565b94610dcf565b93610fd8906116ed565b93610f9e565b634e487b7160e01b600052603260045260246000fd5b9050610e75565b50818610610dd8565b84546001600160a01b0316835260019485019486945060209093019201610b1c565b346101b65760403660031901126101b65761103f6114c4565b6001600160a01b03166000908152600260205260409020805460243591908210156101b657602091611070916115f5565b90546040519160031b1c8152f35b346101b65760603660031901126101b65767ffffffffffffffff6004358181116101b6576110b090369060040161155e565b6024358281116101b6576110c89036906004016114f0565b916044356001600160a01b0381811692918390036101b65760005493846000526001916020968388526040600020948488018089116101a057600055835190811161078c578493611119875461160d565b601f811161122e575b508990601f83116001146111c55760009190836111ba575b5050600019600383901b1c191690841b1785559293925b6000945b611189575b50506004925061116a33866116fc565b60038201550180546001600160a01b0319169091179055604051908152f35b80518510156111b5576111ae856105b4846111a6879899866117b8565b51168a6116fc565b9493611155565b61115a565b015190508a8061113a565b90601f19831691886000528b6000209260005b8d82821061121857505090848895949392106111ff575b505050811b018555939293611151565b015160001960f88460031b161c191690558a80806111ef565b8385015186558a999095019493840193016111d8565b9091929394508660005289600020601f840160051c8101918b8510611278575b90601f889796959493920160051c01905b81811061126c5750611122565b6000815587960161125f565b909150819061124e565b346101b65760203660031901126101b6576004356000548110156112d05760005260016020526112cc6112b86040600020611647565b6040519182916020835260208301906115b5565b0390f35b60405162461bcd60e51b815260206004820152601660248201527523b937bab8103237b2b9903737ba1032bc34b9ba399760511b6044820152606490fd5b346101b65760803660031901126101b65767ffffffffffffffff6004356024358281116101b6576113439036906004016114f0565b91604435908082116101b657366023830112156101b657816004013590611369826114ac565b92611377604051948561148a565b82845260209260248486019160051b830101913683116101b6576024859101915b83831061145e57505050506064359081116101b6576113bb90369060040161155e565b906113c961061d33866117cc565b8451835103611423575060005b84519063ffffffff8116918210156104525761141e916114199084906114106001600160a01b03611407838c6117b8565b511691886117b8565b5190338961196d565b611c48565b6113d6565b6064906040519062461bcd60e51b825260048201526014602482015273098cadcced0e8e640c8de40dcdee840dac2e8c6d60631b6044820152fd5b8235815291810191859101611398565b6040810190811067ffffffffffffffff82111761078c57604052565b90601f8019910116810190811067ffffffffffffffff82111761078c57604052565b67ffffffffffffffff811161078c5760051b60200190565b600435906001600160a01b03821682036101b657565b602435906001600160a01b03821682036101b657565b81601f820112156101b657803591611507836114ac565b92611515604051948561148a565b808452602092838086019260051b8201019283116101b6578301905b82821061153f575050505090565b81356001600160a01b03811681036101b6578152908301908301611531565b81601f820112156101b65780359067ffffffffffffffff821161078c5760405192611593601f8401601f19166020018561148a565b828452602083830101116101b657816000926020809301838601378301015290565b919082519283825260005b8481106115e1575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016115c0565b8054821015610fde5760005260206000200190600090565b90600182811c9216801561163d575b602083101461162757565b634e487b7160e01b600052602260045260246000fd5b91607f169161161c565b906040519182600082549261165b8461160d565b9081845260019485811690816000146116ca5750600114611687575b50506116859250038361148a565b565b9093915060005260209081600020936000915b8183106116b257505061168593508201013880611677565b8554888401850152948501948794509183019161169a565b91505061168594506020925060ff191682840152151560051b8201013880611677565b60001981146101a05760010190565b600091818352600160205260016040842001805490600160401b821015611765579061172d916001820181556115f5565b919080549260031b60018060a01b039384821b809233901b169119161790551682526003602052604082209082526020526040812055565b634e487b7160e01b85526041600452602485fd5b919082039182116101a057565b90611790826114ac565b61179d604051918261148a565b82815280926117ae601f19916114ac565b0190602036910137565b8051821015610fde5760209160051b010190565b60009081526001916020838152836040842001604051918281835491828152019286528186209186905b82821061186557505050509061181081869493038261148a565b83945b611820575b505050905090565b8051851015611860576001600160a01b038061183c87846117b8565b511690831614611858576118518394956116ed565b9493611813565b505091505090565b611818565b83546001600160a01b031685529384019392880192908801906117f6565b1561188a57565b60405162461bcd60e51b815260206004820152602260248201527f596f7520617265206e6f742061206d656d626572206f6620746869732067726f604482015261075760f41b6064820152608490fd5b60005b6001600160a01b038316600090815260026020526040908190205482101561192f5761190d8284926000206115f5565b90549060031b1c1461192757611922906116ed565b6118dd565b505050600190565b50505050600090565b818103929160001380158285131691841216176101a057565b919091600083820193841291129080158216911516176101a057565b919290928260005260016020526040600020936003850194855495611991876116ed565b90556040519060a082019082821067ffffffffffffffff83111761078c5760029160405288835260018060a01b038416602084015260018060a01b03851660408401528560608401526000608084015287600052016020526040600020815180519067ffffffffffffffff821161078c57611a0c835461160d565b601f8111611c04575b50602090601f8311600114611b6d577f12c11720876a43af6b84ee69759066f8ae75366a16b8b46ed317390702e240ef9796959383611b5d9694608094600494600092611b62575b50508160011b916000199060031b1c19161781555b6001810160018060a01b03602086015116906bffffffffffffffffffffffff60a01b9182825416179055600282019060018060a01b03604087015116908254161790556060840151600382015501910151151560ff8019835416911617905560018060a01b03811660005260036020526040600020866000526020526040600020611afe858254611938565b905560018060a01b03831660005260036020526040600020866000526020526040600020611b2d858254611951565b9055604080516001600160a01b0394851681526020810195909552606090850181905292169683928301906115b5565b0390a4565b015190503880611a5d565b908360005260206000209160005b601f1985168110611bec5750936001846080946004947f12c11720876a43af6b84ee69759066f8ae75366a16b8b46ed317390702e240ef9c9b9a98611b5d9a98601f19811610611bd3575b505050811b018155611a72565b015160001960f88460031b161c19169055388080611bc6565b91926020600181928685015181550194019201611b7b565b836000526020600020601f840160051c810160208510611c41575b601f830160051c82018110611c35575050611a15565b60008155600101611c1f565b5080611c1f565b63ffffffff8091169081146101a05760010190565b908160209103126101b6575180151581036101b6579056fea26469706673582212202d24d45d1cc204014488fff2ca25c3ef0f99c60a3cacdc2e5efae6256479e07064736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c80631432aa7c1461130e57806329a6ca32146112825780633168a1291461107e57806338514b7e146110265780634fece28e14610ad257806368a21ef3146109905780638db66ed81461086857806396324bd4146108045780639e6d6830146106f8578063aa22bd1b146105f3578063bf8e917614610523578063c56f5bba14610203578063cbf1304d146101bb5763d8314ffc146100b657600080fd5b346101b65760003660031901126101b6576000805460001981018181116101a0576100e090611786565b600191825b81811061016a5750506100f783611786565b9260005b818110610141575050506040519060208083018184528451809152816040850195019160005b82811061012e5785870386f35b8351875295810195928101928401610121565b80610151610162928597956117b8565b5161015c82866117b8565b526116ed565b9391936100fb565b6101849061017b95939533826117cc565b61018c576116ed565b9391936100e5565b8061015c610199866116ed565b95886117b8565b634e487b7160e01b600052601160045260246000fd5b600080fd5b346101b65760403660031901126101b6576001600160a01b036101dc6114c4565b16600052600360205260406000206024356000526020526020604060002054604051908152f35b6020806003193601126101b657600435903360005260039182825260406000208160005282526040600020549060008212156104d057600081815260018085526040909120600401546001600160a01b039081169591949190600160ff1b85146101a0576000604051956323b872dd60e01b8752336004880152602496308882015260449183038282015285818b8160649687925af1908115610446576000916104b3575b5015610481573360005260048552604060002086600052855260406000209687546102d2816114ac565b986102e06040519a8b61148a565b818a5260009081528781208b898c015b8a8585106104545750505050505033600052848652604060002087600052865260006040812055886000905b61032257005b885163ffffffff821690811015610452578b888b8682610350868c61034782876117b8565b515116946117b8565b510151916000604051958694859363a9059cbb60e01b855260048501528a8401525af190811561044657600091610419575b50156103d7579081866103a68a61039c6103d1968f6117b8565b510151928d6117b8565b51511660005287895260406000208a60005289526103ca6040600020918254611938565b9055611c48565b8961031c565b60405162461bcd60e51b815260048101899052601c818501527f5472616e7366657220746f20726563697069656e74206661696c656400000000818601528590fd5b6104399150893d8b1161043f575b610431818361148a565b810190611c5d565b8d610382565b503d610427565b6040513d6000823e3d90fd5b005b6002916040516104638161146e565b8b865416815284860154838201528152019201920191908c906102f0565b6e151c985b9cd9995c8819985a5b1959608a1b8591600f896040519462461bcd60e51b86526004860152840152820152fd5b6104ca9150863d881161043f57610431818361148a565b8a6102a8565b60405162461bcd60e51b815260048101849052602560248201527f596f7520646f206e6f74206f776520616e797468696e6720696e207468697320604482015264067726f75760dc1b6064820152608490fd5b346101b6576020806003193601126101b65760043590336000526002908181526040600020928354156105b95760005b845481101561045257808261056b61057c93886115f5565b90549060031b1c14610581576116ed565b610553565b336000528484526105aa6105998260406000206115f5565b8154906000199060031b1b19169055565b6105b433846116fc565b6116ed565b60405162461bcd60e51b81526004810183905260126024820152714e6f2070656e64696e6720696e766974657360701b6044820152606490fd5b346101b65760403660031901126101b65760043561060f6114da565b9061062261061d33836117cc565b611883565b60018060a01b038092166000526020906004825260406000209060005281526040600020805491610652836114ac565b92610660604051948561148a565b8084528184018093600052826000206000915b8383106106c4575050505060405192818401908285525180915260408401929160005b8281106106a35785850386f35b83518051881686528201518583015260409094019392810192600101610696565b6002856001926040999799516106d98161146e565b8b86541681528486015483820152815201920192019190959395610673565b346101b65760403660031901126101b6576004356107146114da565b61072161061d33846117cc565b61072b81836118da565b15806107f3575b156107a2576001600160a01b0316600090815260026020526040902080549190600160401b83101561078c5782610771916001610452950181556115f5565b90919082549060031b600019811b9283911b16911916179055565b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b8152602060048201526024808201527f4d656d62657220697320616c726561647920696e202870656e64696e672920676044820152630726f75760e41b6064820152608490fd5b506107fe81836117cc565b15610732565b346101b65760203660031901126101b6576004356000526001602052610859604060002061083181611647565b90600381015490600460018060a01b03910154166040519384936060855260608501906115b5565b91602084015260408301520390f35b346101b65760403660031901126101b6576004356108846114da565b61089161061d33846117cc565b61089b81836117cc565b61094b576001600160a01b03166000908152600260205260408120915b8254918281101561045257816108ce82866115f5565b919054600392831b1c146108ee57506108e89192506116ed565b906108b8565b9150600019928381019081116101a05761091b9261090f61077192876115f5565b9054911b1c91856115f5565b8154801561093557019061093261059983836115f5565b55005b634e487b7160e01b600052603160045260246000fd5b60405162461bcd60e51b815260206004820152601a60248201527f4d656d62657220697320616c726561647920696e2067726f75700000000000006044820152606490fd5b346101b65760803660031901126101b6576004356109ac6114da565b60443560643567ffffffffffffffff81116101b6576109cf90369060040161155e565b916109dd61061d33866117cc565b6001600160a01b0381163314610a97578115610a52576109fd81856117cc565b15610a0d5761045293339061196d565b60405162461bcd60e51b815260206004820152601f60248201527f4372656469746f72206d75737420626520612067726f7570206d656d626572006044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527f416d6f756e74206d75737420626520706f7369746976650000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601360248201527221b0b73737ba1037bbb2903cb7bab939b2b63360691b6044820152606490fd5b60203660031901126101b657610aed61061d336004356117cc565b600435600052600160205260016040600020016040518082602082945493848152019060005260206000209260005b818110611004575050610b319250038261148a565b610b3b8151611786565b90610b468151611786565b9060009060009060005b8151811015610beb57610bb9906001600160a01b0380610b7083866117b8565b51166000526003602052604060002060043560005260205260406000205460008112600014610bbe5750610ba482856117b8565b511661015c610bb2876116ed565b96896117b8565b610b50565b600012610bcc575b506116ed565b610bd682856117b8565b5116610be4610199866116ed565b5287610bc6565b505090916000915b60001984018481116101a057831015610cfb5760005b610c138486611779565b60001981019081116101a057811015610cea576001600160a01b03610c3882886117b8565b511660005260036020526040600020600435600052602052604060002054906001810181116101a057610ca2916001600160a01b03610c7a600184018a6117b8565b51166000526003602052604060002060043560005260205260406000205412610ca7576116ed565b610c09565b6001600160a01b03610cbc60018301896117b8565b51166001600160a01b03610cd0838a6117b8565b5116610cdf600184018a6117b8565b5261015c82896117b8565b5091610cf5906116ed565b91610bf3565b600084865b60001984018481116101a057831015610dc55760005b610d208486611779565b60001981019081116101a057811015610db4576001600160a01b03610d4582886117b8565b511660005260036020526040600020600435600052602052604060002054906001810181116101a057610daf916001600160a01b03610d87600184018a6117b8565b51166000526003602052604060002060043560005260205260406000205413610ca7576116ed565b610d16565b5091610dbf906116ed565b91610d00565b8385916000916000945b80841080610ffb575b15610452576001600160a01b03610def85856117b8565b51166001600160a01b03610e0388886117b8565b51169080600052600360205260406000206004356000526020526040600020546f7fffffffffffffffffffffffffffffff1981600f0b146101a0578260005260036020526040600020600435600052602052604060002054600f0b90600f0b600003600f0b90808212600014610ff457505b8160005260046020526040600020600435600052602052604060002060405191610e9e8361146e565b848352806020840152815492600160401b84101561078c5760018401808455841015610fde5760016020879587956000528160002090831b0192828060a01b038151166bffffffffffffffffffffffff60a01b855416178455015191015581600052600360205260406000206004356000526020526040600020610f23828254611951565b905582600052600360205260406000206004356000526020526040600020610f4c828254611938565b90556040519081527f16c014bb6d1c6cc25e4d9c2ffff2d5052bc083462038999100ead76edf97bee0602060043592a46000526003602052604060002060043560005260205260406000205415610fce575b60005260036020526040600020600435600052602052604060002054610dcf5794610fc8906116ed565b94610dcf565b93610fd8906116ed565b93610f9e565b634e487b7160e01b600052603260045260246000fd5b9050610e75565b50818610610dd8565b84546001600160a01b0316835260019485019486945060209093019201610b1c565b346101b65760403660031901126101b65761103f6114c4565b6001600160a01b03166000908152600260205260409020805460243591908210156101b657602091611070916115f5565b90546040519160031b1c8152f35b346101b65760603660031901126101b65767ffffffffffffffff6004358181116101b6576110b090369060040161155e565b6024358281116101b6576110c89036906004016114f0565b916044356001600160a01b0381811692918390036101b65760005493846000526001916020968388526040600020948488018089116101a057600055835190811161078c578493611119875461160d565b601f811161122e575b508990601f83116001146111c55760009190836111ba575b5050600019600383901b1c191690841b1785559293925b6000945b611189575b50506004925061116a33866116fc565b60038201550180546001600160a01b0319169091179055604051908152f35b80518510156111b5576111ae856105b4846111a6879899866117b8565b51168a6116fc565b9493611155565b61115a565b015190508a8061113a565b90601f19831691886000528b6000209260005b8d82821061121857505090848895949392106111ff575b505050811b018555939293611151565b015160001960f88460031b161c191690558a80806111ef565b8385015186558a999095019493840193016111d8565b9091929394508660005289600020601f840160051c8101918b8510611278575b90601f889796959493920160051c01905b81811061126c5750611122565b6000815587960161125f565b909150819061124e565b346101b65760203660031901126101b6576004356000548110156112d05760005260016020526112cc6112b86040600020611647565b6040519182916020835260208301906115b5565b0390f35b60405162461bcd60e51b815260206004820152601660248201527523b937bab8103237b2b9903737ba1032bc34b9ba399760511b6044820152606490fd5b346101b65760803660031901126101b65767ffffffffffffffff6004356024358281116101b6576113439036906004016114f0565b91604435908082116101b657366023830112156101b657816004013590611369826114ac565b92611377604051948561148a565b82845260209260248486019160051b830101913683116101b6576024859101915b83831061145e57505050506064359081116101b6576113bb90369060040161155e565b906113c961061d33866117cc565b8451835103611423575060005b84519063ffffffff8116918210156104525761141e916114199084906114106001600160a01b03611407838c6117b8565b511691886117b8565b5190338961196d565b611c48565b6113d6565b6064906040519062461bcd60e51b825260048201526014602482015273098cadcced0e8e640c8de40dcdee840dac2e8c6d60631b6044820152fd5b8235815291810191859101611398565b6040810190811067ffffffffffffffff82111761078c57604052565b90601f8019910116810190811067ffffffffffffffff82111761078c57604052565b67ffffffffffffffff811161078c5760051b60200190565b600435906001600160a01b03821682036101b657565b602435906001600160a01b03821682036101b657565b81601f820112156101b657803591611507836114ac565b92611515604051948561148a565b808452602092838086019260051b8201019283116101b6578301905b82821061153f575050505090565b81356001600160a01b03811681036101b6578152908301908301611531565b81601f820112156101b65780359067ffffffffffffffff821161078c5760405192611593601f8401601f19166020018561148a565b828452602083830101116101b657816000926020809301838601378301015290565b919082519283825260005b8481106115e1575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016115c0565b8054821015610fde5760005260206000200190600090565b90600182811c9216801561163d575b602083101461162757565b634e487b7160e01b600052602260045260246000fd5b91607f169161161c565b906040519182600082549261165b8461160d565b9081845260019485811690816000146116ca5750600114611687575b50506116859250038361148a565b565b9093915060005260209081600020936000915b8183106116b257505061168593508201013880611677565b8554888401850152948501948794509183019161169a565b91505061168594506020925060ff191682840152151560051b8201013880611677565b60001981146101a05760010190565b600091818352600160205260016040842001805490600160401b821015611765579061172d916001820181556115f5565b919080549260031b60018060a01b039384821b809233901b169119161790551682526003602052604082209082526020526040812055565b634e487b7160e01b85526041600452602485fd5b919082039182116101a057565b90611790826114ac565b61179d604051918261148a565b82815280926117ae601f19916114ac565b0190602036910137565b8051821015610fde5760209160051b010190565b60009081526001916020838152836040842001604051918281835491828152019286528186209186905b82821061186557505050509061181081869493038261148a565b83945b611820575b505050905090565b8051851015611860576001600160a01b038061183c87846117b8565b511690831614611858576118518394956116ed565b9493611813565b505091505090565b611818565b83546001600160a01b031685529384019392880192908801906117f6565b1561188a57565b60405162461bcd60e51b815260206004820152602260248201527f596f7520617265206e6f742061206d656d626572206f6620746869732067726f604482015261075760f41b6064820152608490fd5b60005b6001600160a01b038316600090815260026020526040908190205482101561192f5761190d8284926000206115f5565b90549060031b1c1461192757611922906116ed565b6118dd565b505050600190565b50505050600090565b818103929160001380158285131691841216176101a057565b919091600083820193841291129080158216911516176101a057565b919290928260005260016020526040600020936003850194855495611991876116ed565b90556040519060a082019082821067ffffffffffffffff83111761078c5760029160405288835260018060a01b038416602084015260018060a01b03851660408401528560608401526000608084015287600052016020526040600020815180519067ffffffffffffffff821161078c57611a0c835461160d565b601f8111611c04575b50602090601f8311600114611b6d577f12c11720876a43af6b84ee69759066f8ae75366a16b8b46ed317390702e240ef9796959383611b5d9694608094600494600092611b62575b50508160011b916000199060031b1c19161781555b6001810160018060a01b03602086015116906bffffffffffffffffffffffff60a01b9182825416179055600282019060018060a01b03604087015116908254161790556060840151600382015501910151151560ff8019835416911617905560018060a01b03811660005260036020526040600020866000526020526040600020611afe858254611938565b905560018060a01b03831660005260036020526040600020866000526020526040600020611b2d858254611951565b9055604080516001600160a01b0394851681526020810195909552606090850181905292169683928301906115b5565b0390a4565b015190503880611a5d565b908360005260206000209160005b601f1985168110611bec5750936001846080946004947f12c11720876a43af6b84ee69759066f8ae75366a16b8b46ed317390702e240ef9c9b9a98611b5d9a98601f19811610611bd3575b505050811b018155611a72565b015160001960f88460031b161c19169055388080611bc6565b91926020600181928685015181550194019201611b7b565b836000526020600020601f840160051c810160208510611c41575b601f830160051c82018110611c35575050611a15565b60008155600101611c1f565b5080611c1f565b63ffffffff8091169081146101a05760010190565b908160209103126101b6575180151581036101b6579056fea26469706673582212202d24d45d1cc204014488fff2ca25c3ef0f99c60a3cacdc2e5efae6256479e07064736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 114,
        "contract": "contracts/Splitwiser.sol:Splitwiser",
        "label": "nextGroupId",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 119,
        "contract": "contracts/Splitwiser.sol:Splitwiser",
        "label": "groups",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Group)106_storage)"
      },
      {
        "astId": 124,
        "contract": "contracts/Splitwiser.sol:Splitwiser",
        "label": "pendingGroupInvites",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 130,
        "contract": "contracts/Splitwiser.sol:Splitwiser",
        "label": "balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_int256))"
      },
      {
        "astId": 138,
        "contract": "contracts/Splitwiser.sol:Splitwiser",
        "label": "paymentsToDo",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(PaymentToDo)111_storage)dyn_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PaymentToDo)111_storage)dyn_storage": {
        "base": "t_struct(PaymentToDo)111_storage",
        "encoding": "dynamic_array",
        "label": "struct Splitwiser.PaymentToDo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(PaymentToDo)111_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct Splitwiser.PaymentToDo[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_struct(PaymentToDo)111_storage)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_int256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => int256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_int256)"
      },
      "t_mapping(t_uint256,t_array(t_struct(PaymentToDo)111_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Splitwiser.PaymentToDo[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(PaymentToDo)111_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_uint256,t_struct(Debt)91_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Splitwiser.Debt)",
        "numberOfBytes": "32",
        "value": "t_struct(Debt)91_storage"
      },
      "t_mapping(t_uint256,t_struct(Group)106_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Splitwiser.Group)",
        "numberOfBytes": "32",
        "value": "t_struct(Group)106_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Debt)91_storage": {
        "encoding": "inplace",
        "label": "struct Splitwiser.Debt",
        "members": [
          {
            "astId": 82,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 84,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "debtor",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 86,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "creditor",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 88,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 90,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "paid",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Group)106_storage": {
        "encoding": "inplace",
        "label": "struct Splitwiser.Group",
        "members": [
          {
            "astId": 93,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "groupName",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 96,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "members",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 101,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "debts",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(Debt)91_storage)"
          },
          {
            "astId": 103,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "nextDebtId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 105,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "token",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(PaymentToDo)111_storage": {
        "encoding": "inplace",
        "label": "struct Splitwiser.PaymentToDo",
        "members": [
          {
            "astId": 108,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "creditor",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 110,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}