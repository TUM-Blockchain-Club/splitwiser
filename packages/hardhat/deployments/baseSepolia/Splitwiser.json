{
  "address": "0xB42Ea8667d4b6363C0DdbcD3C42905113afDC9A8",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "debtId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "debtor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creditor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "DebtAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "debtor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creditor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DebtSettled",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        }
      ],
      "name": "acceptInvite",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_creditor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "addDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_creditors",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "addExpense",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "createGroup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_person",
          "type": "address"
        }
      ],
      "name": "findDebts",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "creditor",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Splitwiser.PaymentToDo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUserGroups",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "groups",
      "outputs": [
        {
          "internalType": "string",
          "name": "groupName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "nextDebtId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_invited",
          "type": "address"
        }
      ],
      "name": "inviteMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        }
      ],
      "name": "payDebtsForGroup",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pendingGroupInvites",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_invited",
          "type": "address"
        }
      ],
      "name": "removeInvite",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        }
      ],
      "name": "settleGroupDebts",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8f6515dd80eea1e1afc5a1d44255a3f41a3780d290c6a032e215b35d2c62a764",
  "receipt": {
    "to": null,
    "from": "0x02136f1EBe65969D10a018aa370FaAa7d35a1a65",
    "contractAddress": "0xB42Ea8667d4b6363C0DdbcD3C42905113afDC9A8",
    "transactionIndex": 6,
    "gasUsed": "1620486",
    "logsBloom": "0x
    "blockHash": "0x0b2aa961a3c4b050c95f2482548e768f791e2a1e5ffe18074538d9cdb1429c00",
    "transactionHash": "0x8f6515dd80eea1e1afc5a1d44255a3f41a3780d290c6a032e215b35d2c62a764",
    "logs": [],
    "blockNumber": 12561944,
    "cumulativeGasUsed": "3990478",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1031528a32888e53eb093fbe20d17837",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"debtId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creditor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"DebtAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creditor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DebtSettled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"}],\"name\":\"acceptInvite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_creditor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"addDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_creditors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"addExpense\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"createGroup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_person\",\"type\":\"address\"}],\"name\":\"findDebts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creditor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Splitwiser.PaymentToDo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserGroups\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"groups\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"groupName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nextDebtId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_invited\",\"type\":\"address\"}],\"name\":\"inviteMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"}],\"name\":\"payDebtsForGroup\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingGroupInvites\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_invited\",\"type\":\"address\"}],\"name\":\"removeInvite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"}],\"name\":\"settleGroupDebts\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Splitwiser.sol\":\"Splitwiser\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/Splitwiser.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\ncontract Splitwiser {\\n    struct Debt {\\n        string name;\\n        address debtor;\\n        address creditor;\\n        uint256 amount;\\n        bool paid;\\n    }\\n\\n    struct Group {\\n        string groupName;\\n        address[] members;\\n        mapping(uint256 => Debt) debts; // A mapping from debtId to actual Debt\\n        uint256 nextDebtId;\\n        address token;\\n    }\\n\\n    // (Optimization) Data structure to keep track of what a person owe and\\n    // in what group.\\n    struct PaymentToDo {\\n        address creditor;\\n        uint256 amount;\\n    }\\n\\n    uint256 private nextGroupId = 1; // Keep track of the next groupId\\n    mapping(uint256 => Group) public groups;\\n    mapping(address => uint256[]) public pendingGroupInvites; // Database of pending user invitations to a group(s)\\n\\n    // (Optimization) A mapping address => groupId => balance\\n    // to keep track of user balance in smart contract\\n    mapping(address => mapping(uint256 => int256)) public balances;\\n\\n    // (Optimization) A mapping of address => groupId => payments ( creditor + amt )\\n    // to keep track of what a person owe and in what group. Faster and cheaper than iterating all groups.\\n    mapping(address => mapping(uint256 => PaymentToDo[])) private paymentsToDo;\\n\\n    // Event to notify users if a new debt is added\\n    event DebtAdded(uint256 indexed groupId, uint256 indexed debtId, address indexed debtor, address creditor, uint256 amount, string name);\\n\\n    modifier onlyMember(uint256 _groupId) {\\n        require(isMember(_groupId, msg.sender), \\\"You are not a member of this group\\\");\\n        _;\\n    }\\n\\n    function acceptInvite(uint256 _groupId) public {\\n        uint256[] storage invitations = pendingGroupInvites[msg.sender];\\n        require(invitations.length > 0, \\\"No pending invites\\\");\\n        for(uint i = 0; i < invitations.length; i++) {\\n            if(invitations[i] == _groupId){\\n                delete pendingGroupInvites[msg.sender][i];\\n                _addMember(_groupId, msg.sender);\\n            }\\n        }\\n    }\\n\\n    function _addMember(uint256 _groupId, address _member) internal {\\n        groups[_groupId].members.push(msg.sender);\\n        balances[_member][_groupId] = 0;\\n    }\\n\\n    function getUserGroups() external view returns (uint256[] memory) {\\n        uint256 count = 0;\\n        uint256[] memory tempGroups = new uint256[](nextGroupId - 1);\\n        for (uint256 i = 1; i < nextGroupId; i++) {\\n            if (isMember(i, msg.sender)) {\\n                tempGroups[count++] = i;\\n            }\\n        }\\n\\n        uint256[] memory userGroups = new uint256[](count);\\n        for (uint256 j = 0; j < count; j++) {\\n            userGroups[j] = tempGroups[j];\\n        }\\n\\n        return userGroups;\\n    }\\n\\n    function createGroup(string memory _name, address[] memory _members, address _token) external returns (uint256) {\\n        uint256 currentGroupId = nextGroupId;\\n        Group storage newGroup = groups[currentGroupId];\\n        nextGroupId = nextGroupId + 1;\\n        newGroup.groupName = _name;\\n\\n        for (uint i = 0; i < _members.length; i++) {\\n            _addMember(currentGroupId, _members[i]);\\n        }\\n        _addMember(currentGroupId, msg.sender);\\n\\n        newGroup.nextDebtId = 1;\\n        newGroup.token = _token;\\n\\n        return currentGroupId;\\n    }\\n\\n    function isMember(uint256 _groupId, address _member) internal view returns (bool) {\\n        address[] memory members = groups[_groupId].members;\\n        for (uint i = 0; i < members.length; i++) {\\n            if (members[i] == _member) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function isPending(uint256 _groupId, address _member) internal view returns (bool) {\\n        for(uint i = 0; i < pendingGroupInvites[_member].length; i++) {\\n            if (pendingGroupInvites[_member][i] == _groupId) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function inviteMember(uint256 _groupId, address _invited) public onlyMember(_groupId) {\\n        require(!isPending(_groupId, _invited) && !isMember(_groupId, _invited), \\\"Member is already in (pending) group\\\");\\n        pendingGroupInvites[_invited].push(_groupId);\\n    }\\n\\n    function removeInvite(uint256 _groupId, address _invited) public onlyMember(_groupId) {\\n        require(!isMember(_groupId, _invited), \\\"Member is already in group\\\");\\n        uint256[] storage invites = pendingGroupInvites[_invited];\\n        for (uint i = 0; i < invites.length; i++) {\\n            if (invites[i] == _groupId) {\\n                invites[i] = invites[invites.length - 1];\\n                invites.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function addDebt(uint256 _groupId, address _creditor, uint256 _amount, string memory _name) external onlyMember(_groupId) {\\n        require(_creditor != msg.sender, \\\"Cannot owe yourself\\\");\\n        require(_amount > 0, \\\"Amount must be positive\\\");\\n        require(isMember(_groupId, _creditor), \\\"Creditor must be a group member\\\");\\n\\n        _addDebt(_groupId, msg.sender, _creditor, _amount, _name);\\n    }\\n\\n    function _addDebt(uint256 _groupId, address _debitor, address _creditor, uint256 _amount, string memory _name) internal {\\n        Group storage group = groups[_groupId];\\n        uint256 debtId = group.nextDebtId++;\\n        group.debts[debtId] = Debt(_name, _debitor, _creditor, _amount, false);\\n\\n        balances[_debitor][_groupId] -= int256(_amount);\\n        balances[_creditor][_groupId] += int256(_amount);\\n\\n        emit DebtAdded(_groupId, debtId, _debitor, _creditor, _amount, _name);\\n    }\\n\\n    function addExpense(uint256 _groupId, address[] memory _creditors, uint256[] memory _amounts, string memory _name) external onlyMember(_groupId) {\\n        require(_creditors.length == _amounts.length , \\\"Lenghts do not match\\\");\\n        for(uint32 i=0; i<_creditors.length; i++){\\n            _addDebt(_groupId, msg.sender, _creditors[i], _amounts[i], _name);\\n        }\\n    }\\n\\n    function findDebts(uint256 _groupId, address _person) external view onlyMember(_groupId) returns (PaymentToDo[] memory){\\n        return paymentsToDo[_person][_groupId];\\n    }\\n\\n    function payDebtsForGroup(uint256 _groupId) external payable {\\n        int256 totalAmount = balances[msg.sender][_groupId];\\n        require(totalAmount < 0, \\\"You do not owe anything in this group\\\");\\n        IERC20 token = IERC20(groups[_groupId].token);\\n        require(token.transferFrom(msg.sender, address(this), uint256(-totalAmount)), \\\"Transfer failed\\\");\\n        PaymentToDo[]memory ptd = paymentsToDo[msg.sender][_groupId];\\n        balances[msg.sender][_groupId] = 0;\\n\\n        for(uint32 i=0; i<ptd.length;i++) {\\n            require(token.transfer(ptd[i].creditor, ptd[i].amount), \\\"Transfer to recipient failed\\\");\\n            balances[ptd[i].creditor][_groupId] -= int256(ptd[i].amount);\\n        }\\n    }\\n\\n    function settleGroupDebts(uint256 _groupId) payable external onlyMember(_groupId) {\\n        Group storage group = groups[_groupId];\\n        address[] memory members = group.members;\\n        address[] memory debtors = new address[](members.length);\\n        address[] memory creditors = new address[](members.length);\\n        uint256 debtorCount = 0;\\n        uint256 creditorCount = 0;\\n        mapping(address => mapping(uint256 => int256)) storage balances_temp = balances;\\n\\n        // Separate debtors and creditors\\n        for (uint256 i = 0; i < members.length; i++) {\\n            int256 balance = balances_temp[members[i]][_groupId];\\n            if (balance < 0) {\\n                debtors[debtorCount++] = members[i];\\n            } else if (balance > 0) {\\n                creditors[creditorCount++] = members[i];\\n            }\\n        }\\n\\n        sortAddresses(debtors, debtorCount, _groupId, true);\\n        sortAddresses(creditors, creditorCount, _groupId, false);\\n\\n        uint256 debtorIndex = 0;\\n        uint256 creditorIndex = 0;\\n        while (debtorIndex < debtorCount && creditorIndex < creditorCount) {\\n            address debtor = debtors[debtorIndex];\\n            address creditor = creditors[creditorIndex];\\n            uint256 amount = uint256(min(-int128(balances_temp[debtor][_groupId]), int128(balances_temp[creditor][_groupId])));\\n\\n            paymentsToDo[debtor][_groupId].push(PaymentToDo(creditor, amount));\\n\\n            balances_temp[debtor][_groupId] += int256(amount);\\n            balances_temp[creditor][_groupId] -= int256(amount);\\n\\n            emit DebtSettled(_groupId, debtor, creditor, amount);\\n\\n            if (balances_temp[debtor][_groupId] == 0) debtorIndex++;\\n            if (balances_temp[creditor][_groupId] == 0) creditorIndex++;\\n\\n        }\\n    }\\n\\n    function sortAddresses(address[] memory arr, uint256 count, uint256 _groupId, bool isDebtors) internal view {\\n        for (uint256 i = 0; i < count - 1; i++) {\\n            for (uint256 j = 0; j < count - i - 1; j++) {\\n                if (isDebtors) {\\n                    if (balances[arr[j]][_groupId] > balances[arr[j + 1]][_groupId]) {\\n                        (arr[j], arr[j + 1]) = (arr[j + 1], arr[j]);\\n                    }\\n                } else {\\n                    if (balances[arr[j]][_groupId] < balances[arr[j + 1]][_groupId]) {\\n                        (arr[j], arr[j + 1]) = (arr[j + 1], arr[j]);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    event DebtSettled(uint256 indexed groupId, address indexed debtor, address indexed creditor, uint256 amount);\\n}\\n\",\"keccak256\":\"0x69b43a7214a16778fd84c07ae91548337a2878c5e583e44564f81c7ba13a933e\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001b576001600055611bf490816100218239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c80631432aa7c146112fd5780633168a129146110f957806338514b7e146110a15780634fece28e14610b4d57806368a21ef314610a0b5780638db66ed8146108e357806396324bd4146107f95780639e6d6830146106ed578063aa22bd1b146105e8578063bf8e917614610518578063c56f5bba146101f8578063cbf1304d146101b05763d8314ffc146100ab57600080fd5b346101ab5760003660031901126101ab57600080546000198101818111610195576100d5906116cf565b600191825b81811061015f5750506100ec836116cf565b9260005b818110610136575050506040519060208083018184528451809152816040850195019160005b8281106101235785870386f35b8351875295810195928101928401610116565b8061014661015792859795611701565b516101518286611701565b52611636565b9391936100f0565b610179906101709593953382611715565b61018157611636565b9391936100da565b8061015161018e86611636565b9588611701565b634e487b7160e01b600052601160045260246000fd5b600080fd5b346101ab5760403660031901126101ab576001600160a01b036101d16114b3565b16600052600360205260406000206024356000526020526020604060002054604051908152f35b6020806003193601126101ab57600435903360005260039182825260406000208160005282526040600020549060008212156104c557600081815260018085526040909120600401546001600160a01b039081169591949190600160ff1b8514610195576000604051956323b872dd60e01b8752336004880152602496308882015260449183038282015285818b8160649687925af190811561043b576000916104a8575b5015610476573360005260048552604060002086600052855260406000209687546102c78161149b565b986102d56040519a8b611479565b818a5260009081528781208b898c015b8a8585106104495750505050505033600052848652604060002087600052865260006040812055886000905b61031757005b885163ffffffff821690811015610447578b888b8682610345868c61033c8287611701565b51511694611701565b510151916000604051958694859363a9059cbb60e01b855260048501528a8401525af190811561043b5760009161040e575b50156103cc5790818661039b8a6103916103c6968f611701565b510151928d611701565b51511660005287895260406000208a60005289526103bf6040600020918254611881565b9055611b91565b89610311565b60405162461bcd60e51b815260048101899052601c818501527f5472616e7366657220746f20726563697069656e74206661696c656400000000818601528590fd5b61042e9150893d8b11610434575b6104268183611479565b810190611ba6565b8d610377565b503d61041c565b6040513d6000823e3d90fd5b005b6002916040516104588161145d565b8b865416815284860154838201528152019201920191908c906102e5565b6e151c985b9cd9995c8819985a5b1959608a1b8591600f896040519462461bcd60e51b86526004860152840152820152fd5b6104bf9150863d8811610434576104268183611479565b8a61029d565b60405162461bcd60e51b815260048101849052602560248201527f596f7520646f206e6f74206f776520616e797468696e6720696e207468697320604482015264067726f75760dc1b6064820152608490fd5b346101ab576020806003193601126101ab5760043590336000526002908181526040600020928354156105ae5760005b845481101561044757808261056061057193886115a4565b90549060031b1c1461057657611636565b610548565b3360005284845261059f61058e8260406000206115a4565b8154906000199060031b1b19169055565b6105a93384611645565b611636565b60405162461bcd60e51b81526004810183905260126024820152714e6f2070656e64696e6720696e766974657360701b6044820152606490fd5b346101ab5760403660031901126101ab576004356106046114c9565b906106176106123383611715565b6117cc565b60018060a01b0380921660005260209060048252604060002090600052815260406000208054916106478361149b565b926106556040519485611479565b8084528184018093600052826000206000915b8383106106b9575050505060405192818401908285525180915260408401929160005b8281106106985785850386f35b8351805188168652820151858301526040909401939281019260010161068b565b6002856001926040999799516106ce8161145d565b8b86541681528486015483820152815201920192019190959395610668565b346101ab5760403660031901126101ab576004356107096114c9565b6107166106123384611715565b6107208183611823565b15806107e8575b15610797576001600160a01b0316600090815260026020526040902080549190600160401b8310156107815782610766916001610447950181556115a4565b90919082549060031b600019811b9283911b16911916179055565b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b8152602060048201526024808201527f4d656d62657220697320616c726561647920696e202870656e64696e672920676044820152630726f75760e41b6064820152608490fd5b506107f38183611715565b15610727565b346101ab576020806003193601126101ab5760043560005260019081815260406000209060405191600093815490610830826115bc565b808652918181169081156108c5575060011461088d575b505061085883610880950384611479565b600381015490600460018060a01b0391015416906040519485946060865260608601906115f6565b9284015260408301520390f35b60008381528481209096505b8287106108b25750505092820181019261085883610847565b8054868801860152958401958101610899565b60ff1916858701525050151560051b83018201935061085883610847565b346101ab5760403660031901126101ab576004356108ff6114c9565b61090c6106123384611715565b6109168183611715565b6109c6576001600160a01b03166000908152600260205260408120915b82549182811015610447578161094982866115a4565b919054600392831b1c146109695750610963919250611636565b90610933565b915060001992838101908111610195576109969261098a61076692876115a4565b9054911b1c91856115a4565b815480156109b05701906109ad61058e83836115a4565b55005b634e487b7160e01b600052603160045260246000fd5b60405162461bcd60e51b815260206004820152601a60248201527f4d656d62657220697320616c726561647920696e2067726f75700000000000006044820152606490fd5b346101ab5760803660031901126101ab57600435610a276114c9565b60443560643567ffffffffffffffff81116101ab57610a4a90369060040161154d565b91610a586106123386611715565b6001600160a01b0381163314610b12578115610acd57610a788185611715565b15610a88576104479333906118b6565b60405162461bcd60e51b815260206004820152601f60248201527f4372656469746f72206d75737420626520612067726f7570206d656d626572006044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527f416d6f756e74206d75737420626520706f7369746976650000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601360248201527221b0b73737ba1037bbb2903cb7bab939b2b63360691b6044820152606490fd5b60203660031901126101ab57610b6861061233600435611715565b600435600052600160205260016040600020016040518082602082945493848152019060005260206000209260005b81811061107f575050610bac92500382611479565b610bb681516116cf565b90610bc181516116cf565b9060009060009060005b8151811015610c6657610c34906001600160a01b0380610beb8386611701565b51166000526003602052604060002060043560005260205260406000205460008112600014610c395750610c1f8285611701565b5116610151610c2d87611636565b9689611701565b610bcb565b600012610c47575b50611636565b610c518285611701565b5116610c5f61018e86611636565b5287610c41565b505090916000915b600019840184811161019557831015610d765760005b610c8e84866116c2565b600019810190811161019557811015610d65576001600160a01b03610cb38288611701565b5116600052600360205260406000206004356000526020526040600020549060018101811161019557610d1d916001600160a01b03610cf5600184018a611701565b51166000526003602052604060002060043560005260205260406000205412610d2257611636565b610c84565b6001600160a01b03610d376001830189611701565b51166001600160a01b03610d4b838a611701565b5116610d5a600184018a611701565b526101518289611701565b5091610d7090611636565b91610c6e565b600084865b600019840184811161019557831015610e405760005b610d9b84866116c2565b600019810190811161019557811015610e2f576001600160a01b03610dc08288611701565b5116600052600360205260406000206004356000526020526040600020549060018101811161019557610e2a916001600160a01b03610e02600184018a611701565b51166000526003602052604060002060043560005260205260406000205413610d2257611636565b610d91565b5091610e3a90611636565b91610d7b565b8385916000916000945b80841080611076575b15610447576001600160a01b03610e6a8585611701565b51166001600160a01b03610e7e8888611701565b51169080600052600360205260406000206004356000526020526040600020546f7fffffffffffffffffffffffffffffff1981600f0b14610195578260005260036020526040600020600435600052602052604060002054600f0b90600f0b600003600f0b9080821260001461106f57505b8160005260046020526040600020600435600052602052604060002060405191610f198361145d565b848352806020840152815492600160401b84101561078157600184018084558410156110595760016020879587956000528160002090831b0192828060a01b038151166bffffffffffffffffffffffff60a01b855416178455015191015581600052600360205260406000206004356000526020526040600020610f9e82825461189a565b905582600052600360205260406000206004356000526020526040600020610fc7828254611881565b90556040519081527f16c014bb6d1c6cc25e4d9c2ffff2d5052bc083462038999100ead76edf97bee0602060043592a46000526003602052604060002060043560005260205260406000205415611049575b60005260036020526040600020600435600052602052604060002054610e4a579461104390611636565b94610e4a565b9361105390611636565b93611019565b634e487b7160e01b600052603260045260246000fd5b9050610ef0565b50818610610e53565b84546001600160a01b0316835260019485019486945060209093019201610b97565b346101ab5760403660031901126101ab576110ba6114b3565b6001600160a01b03166000908152600260205260409020805460243591908210156101ab576020916110eb916115a4565b90546040519160031b1c8152f35b346101ab5760603660031901126101ab5767ffffffffffffffff6004358181116101ab5761112b90369060040161154d565b6024358281116101ab576111439036906004016114df565b916044356001600160a01b0381811692918390036101ab57600054938460005260019160209683885260406000209484880180891161019557600055835190811161078157849361119487546115bc565b601f81116112a9575b508990601f8311600114611240576000919083611235575b5050600019600383901b1c191690841b1785559293925b6000945b611204575b5050600492506111e53386611645565b60038201550180546001600160a01b0319169091179055604051908152f35b805185101561123057611229856105a98461122187989986611701565b51168a611645565b94936111d0565b6111d5565b015190508a806111b5565b90601f19831691886000528b6000209260005b8d828210611293575050908488959493921061127a575b505050811b0185559392936111cc565b015160001960f88460031b161c191690558a808061126a565b8385015186558a99909501949384019301611253565b9091929394508660005289600020601f840160051c8101918b85106112f3575b90601f889796959493920160051c01905b8181106112e7575061119d565b600081558796016112da565b90915081906112c9565b346101ab5760803660031901126101ab5767ffffffffffffffff6004356024358281116101ab576113329036906004016114df565b91604435908082116101ab57366023830112156101ab578160040135906113588261149b565b926113666040519485611479565b82845260209260248486019160051b830101913683116101ab576024859101915b83831061144d57505050506064359081116101ab576113aa90369060040161154d565b906113b86106123386611715565b8451835103611412575060005b84519063ffffffff8116918210156104475761140d916114089084906113ff6001600160a01b036113f6838c611701565b51169188611701565b519033896118b6565b611b91565b6113c5565b6064906040519062461bcd60e51b825260048201526014602482015273098cadcced0e8e640c8de40dcdee840dac2e8c6d60631b6044820152fd5b8235815291810191859101611387565b6040810190811067ffffffffffffffff82111761078157604052565b90601f8019910116810190811067ffffffffffffffff82111761078157604052565b67ffffffffffffffff81116107815760051b60200190565b600435906001600160a01b03821682036101ab57565b602435906001600160a01b03821682036101ab57565b81601f820112156101ab578035916114f68361149b565b926115046040519485611479565b808452602092838086019260051b8201019283116101ab578301905b82821061152e575050505090565b81356001600160a01b03811681036101ab578152908301908301611520565b81601f820112156101ab5780359067ffffffffffffffff82116107815760405192611582601f8401601f191660200185611479565b828452602083830101116101ab57816000926020809301838601378301015290565b80548210156110595760005260206000200190600090565b90600182811c921680156115ec575b60208310146115d657565b634e487b7160e01b600052602260045260246000fd5b91607f16916115cb565b919082519283825260005b848110611622575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201611601565b60001981146101955760010190565b600091818352600160205260016040842001805490600160401b8210156116ae5790611676916001820181556115a4565b919080549260031b60018060a01b039384821b809233901b169119161790551682526003602052604082209082526020526040812055565b634e487b7160e01b85526041600452602485fd5b9190820391821161019557565b906116d98261149b565b6116e66040519182611479565b82815280926116f7601f199161149b565b0190602036910137565b80518210156110595760209160051b010190565b60009081526001916020838152836040842001604051918281835491828152019286528186209186905b8282106117ae575050505090611759818694930382611479565b83945b611769575b505050905090565b80518510156117a9576001600160a01b03806117858784611701565b5116908316146117a15761179a839495611636565b949361175c565b505091505090565b611761565b83546001600160a01b0316855293840193928801929088019061173f565b156117d357565b60405162461bcd60e51b815260206004820152602260248201527f596f7520617265206e6f742061206d656d626572206f6620746869732067726f604482015261075760f41b6064820152608490fd5b60005b6001600160a01b0383166000908152600260205260409081902054821015611878576118568284926000206115a4565b90549060031b1c146118705761186b90611636565b611826565b505050600190565b50505050600090565b8181039291600013801582851316918412161761019557565b9190916000838201938412911290801582169115161761019557565b9192909282600052600160205260406000209360038501948554956118da87611636565b90556040519060a082019082821067ffffffffffffffff8311176107815760029160405288835260018060a01b038416602084015260018060a01b03851660408401528560608401526000608084015287600052016020526040600020815180519067ffffffffffffffff82116107815761195583546115bc565b601f8111611b4d575b50602090601f8311600114611ab6577f12c11720876a43af6b84ee69759066f8ae75366a16b8b46ed317390702e240ef9796959383611aa69694608094600494600092611aab575b50508160011b916000199060031b1c19161781555b6001810160018060a01b03602086015116906bffffffffffffffffffffffff60a01b9182825416179055600282019060018060a01b03604087015116908254161790556060840151600382015501910151151560ff8019835416911617905560018060a01b03811660005260036020526040600020866000526020526040600020611a47858254611881565b905560018060a01b03831660005260036020526040600020866000526020526040600020611a7685825461189a565b9055604080516001600160a01b0394851681526020810195909552606090850181905292169683928301906115f6565b0390a4565b0151905038806119a6565b908360005260206000209160005b601f1985168110611b355750936001846080946004947f12c11720876a43af6b84ee69759066f8ae75366a16b8b46ed317390702e240ef9c9b9a98611aa69a98601f19811610611b1c575b505050811b0181556119bb565b015160001960f88460031b161c19169055388080611b0f565b91926020600181928685015181550194019201611ac4565b836000526020600020601f840160051c810160208510611b8a575b601f830160051c82018110611b7e57505061195e565b60008155600101611b68565b5080611b68565b63ffffffff8091169081146101955760010190565b908160209103126101ab575180151581036101ab579056fea2646970667358221220a2c7622bef91e6b1c15a3469f6ab5348a8004d02cb54e417b2b52f48ea6bbc8564736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c80631432aa7c146112fd5780633168a129146110f957806338514b7e146110a15780634fece28e14610b4d57806368a21ef314610a0b5780638db66ed8146108e357806396324bd4146107f95780639e6d6830146106ed578063aa22bd1b146105e8578063bf8e917614610518578063c56f5bba146101f8578063cbf1304d146101b05763d8314ffc146100ab57600080fd5b346101ab5760003660031901126101ab57600080546000198101818111610195576100d5906116cf565b600191825b81811061015f5750506100ec836116cf565b9260005b818110610136575050506040519060208083018184528451809152816040850195019160005b8281106101235785870386f35b8351875295810195928101928401610116565b8061014661015792859795611701565b516101518286611701565b52611636565b9391936100f0565b610179906101709593953382611715565b61018157611636565b9391936100da565b8061015161018e86611636565b9588611701565b634e487b7160e01b600052601160045260246000fd5b600080fd5b346101ab5760403660031901126101ab576001600160a01b036101d16114b3565b16600052600360205260406000206024356000526020526020604060002054604051908152f35b6020806003193601126101ab57600435903360005260039182825260406000208160005282526040600020549060008212156104c557600081815260018085526040909120600401546001600160a01b039081169591949190600160ff1b8514610195576000604051956323b872dd60e01b8752336004880152602496308882015260449183038282015285818b8160649687925af190811561043b576000916104a8575b5015610476573360005260048552604060002086600052855260406000209687546102c78161149b565b986102d56040519a8b611479565b818a5260009081528781208b898c015b8a8585106104495750505050505033600052848652604060002087600052865260006040812055886000905b61031757005b885163ffffffff821690811015610447578b888b8682610345868c61033c8287611701565b51511694611701565b510151916000604051958694859363a9059cbb60e01b855260048501528a8401525af190811561043b5760009161040e575b50156103cc5790818661039b8a6103916103c6968f611701565b510151928d611701565b51511660005287895260406000208a60005289526103bf6040600020918254611881565b9055611b91565b89610311565b60405162461bcd60e51b815260048101899052601c818501527f5472616e7366657220746f20726563697069656e74206661696c656400000000818601528590fd5b61042e9150893d8b11610434575b6104268183611479565b810190611ba6565b8d610377565b503d61041c565b6040513d6000823e3d90fd5b005b6002916040516104588161145d565b8b865416815284860154838201528152019201920191908c906102e5565b6e151c985b9cd9995c8819985a5b1959608a1b8591600f896040519462461bcd60e51b86526004860152840152820152fd5b6104bf9150863d8811610434576104268183611479565b8a61029d565b60405162461bcd60e51b815260048101849052602560248201527f596f7520646f206e6f74206f776520616e797468696e6720696e207468697320604482015264067726f75760dc1b6064820152608490fd5b346101ab576020806003193601126101ab5760043590336000526002908181526040600020928354156105ae5760005b845481101561044757808261056061057193886115a4565b90549060031b1c1461057657611636565b610548565b3360005284845261059f61058e8260406000206115a4565b8154906000199060031b1b19169055565b6105a93384611645565b611636565b60405162461bcd60e51b81526004810183905260126024820152714e6f2070656e64696e6720696e766974657360701b6044820152606490fd5b346101ab5760403660031901126101ab576004356106046114c9565b906106176106123383611715565b6117cc565b60018060a01b0380921660005260209060048252604060002090600052815260406000208054916106478361149b565b926106556040519485611479565b8084528184018093600052826000206000915b8383106106b9575050505060405192818401908285525180915260408401929160005b8281106106985785850386f35b8351805188168652820151858301526040909401939281019260010161068b565b6002856001926040999799516106ce8161145d565b8b86541681528486015483820152815201920192019190959395610668565b346101ab5760403660031901126101ab576004356107096114c9565b6107166106123384611715565b6107208183611823565b15806107e8575b15610797576001600160a01b0316600090815260026020526040902080549190600160401b8310156107815782610766916001610447950181556115a4565b90919082549060031b600019811b9283911b16911916179055565b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b8152602060048201526024808201527f4d656d62657220697320616c726561647920696e202870656e64696e672920676044820152630726f75760e41b6064820152608490fd5b506107f38183611715565b15610727565b346101ab576020806003193601126101ab5760043560005260019081815260406000209060405191600093815490610830826115bc565b808652918181169081156108c5575060011461088d575b505061085883610880950384611479565b600381015490600460018060a01b0391015416906040519485946060865260608601906115f6565b9284015260408301520390f35b60008381528481209096505b8287106108b25750505092820181019261085883610847565b8054868801860152958401958101610899565b60ff1916858701525050151560051b83018201935061085883610847565b346101ab5760403660031901126101ab576004356108ff6114c9565b61090c6106123384611715565b6109168183611715565b6109c6576001600160a01b03166000908152600260205260408120915b82549182811015610447578161094982866115a4565b919054600392831b1c146109695750610963919250611636565b90610933565b915060001992838101908111610195576109969261098a61076692876115a4565b9054911b1c91856115a4565b815480156109b05701906109ad61058e83836115a4565b55005b634e487b7160e01b600052603160045260246000fd5b60405162461bcd60e51b815260206004820152601a60248201527f4d656d62657220697320616c726561647920696e2067726f75700000000000006044820152606490fd5b346101ab5760803660031901126101ab57600435610a276114c9565b60443560643567ffffffffffffffff81116101ab57610a4a90369060040161154d565b91610a586106123386611715565b6001600160a01b0381163314610b12578115610acd57610a788185611715565b15610a88576104479333906118b6565b60405162461bcd60e51b815260206004820152601f60248201527f4372656469746f72206d75737420626520612067726f7570206d656d626572006044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527f416d6f756e74206d75737420626520706f7369746976650000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601360248201527221b0b73737ba1037bbb2903cb7bab939b2b63360691b6044820152606490fd5b60203660031901126101ab57610b6861061233600435611715565b600435600052600160205260016040600020016040518082602082945493848152019060005260206000209260005b81811061107f575050610bac92500382611479565b610bb681516116cf565b90610bc181516116cf565b9060009060009060005b8151811015610c6657610c34906001600160a01b0380610beb8386611701565b51166000526003602052604060002060043560005260205260406000205460008112600014610c395750610c1f8285611701565b5116610151610c2d87611636565b9689611701565b610bcb565b600012610c47575b50611636565b610c518285611701565b5116610c5f61018e86611636565b5287610c41565b505090916000915b600019840184811161019557831015610d765760005b610c8e84866116c2565b600019810190811161019557811015610d65576001600160a01b03610cb38288611701565b5116600052600360205260406000206004356000526020526040600020549060018101811161019557610d1d916001600160a01b03610cf5600184018a611701565b51166000526003602052604060002060043560005260205260406000205412610d2257611636565b610c84565b6001600160a01b03610d376001830189611701565b51166001600160a01b03610d4b838a611701565b5116610d5a600184018a611701565b526101518289611701565b5091610d7090611636565b91610c6e565b600084865b600019840184811161019557831015610e405760005b610d9b84866116c2565b600019810190811161019557811015610e2f576001600160a01b03610dc08288611701565b5116600052600360205260406000206004356000526020526040600020549060018101811161019557610e2a916001600160a01b03610e02600184018a611701565b51166000526003602052604060002060043560005260205260406000205413610d2257611636565b610d91565b5091610e3a90611636565b91610d7b565b8385916000916000945b80841080611076575b15610447576001600160a01b03610e6a8585611701565b51166001600160a01b03610e7e8888611701565b51169080600052600360205260406000206004356000526020526040600020546f7fffffffffffffffffffffffffffffff1981600f0b14610195578260005260036020526040600020600435600052602052604060002054600f0b90600f0b600003600f0b9080821260001461106f57505b8160005260046020526040600020600435600052602052604060002060405191610f198361145d565b848352806020840152815492600160401b84101561078157600184018084558410156110595760016020879587956000528160002090831b0192828060a01b038151166bffffffffffffffffffffffff60a01b855416178455015191015581600052600360205260406000206004356000526020526040600020610f9e82825461189a565b905582600052600360205260406000206004356000526020526040600020610fc7828254611881565b90556040519081527f16c014bb6d1c6cc25e4d9c2ffff2d5052bc083462038999100ead76edf97bee0602060043592a46000526003602052604060002060043560005260205260406000205415611049575b60005260036020526040600020600435600052602052604060002054610e4a579461104390611636565b94610e4a565b9361105390611636565b93611019565b634e487b7160e01b600052603260045260246000fd5b9050610ef0565b50818610610e53565b84546001600160a01b0316835260019485019486945060209093019201610b97565b346101ab5760403660031901126101ab576110ba6114b3565b6001600160a01b03166000908152600260205260409020805460243591908210156101ab576020916110eb916115a4565b90546040519160031b1c8152f35b346101ab5760603660031901126101ab5767ffffffffffffffff6004358181116101ab5761112b90369060040161154d565b6024358281116101ab576111439036906004016114df565b916044356001600160a01b0381811692918390036101ab57600054938460005260019160209683885260406000209484880180891161019557600055835190811161078157849361119487546115bc565b601f81116112a9575b508990601f8311600114611240576000919083611235575b5050600019600383901b1c191690841b1785559293925b6000945b611204575b5050600492506111e53386611645565b60038201550180546001600160a01b0319169091179055604051908152f35b805185101561123057611229856105a98461122187989986611701565b51168a611645565b94936111d0565b6111d5565b015190508a806111b5565b90601f19831691886000528b6000209260005b8d828210611293575050908488959493921061127a575b505050811b0185559392936111cc565b015160001960f88460031b161c191690558a808061126a565b8385015186558a99909501949384019301611253565b9091929394508660005289600020601f840160051c8101918b85106112f3575b90601f889796959493920160051c01905b8181106112e7575061119d565b600081558796016112da565b90915081906112c9565b346101ab5760803660031901126101ab5767ffffffffffffffff6004356024358281116101ab576113329036906004016114df565b91604435908082116101ab57366023830112156101ab578160040135906113588261149b565b926113666040519485611479565b82845260209260248486019160051b830101913683116101ab576024859101915b83831061144d57505050506064359081116101ab576113aa90369060040161154d565b906113b86106123386611715565b8451835103611412575060005b84519063ffffffff8116918210156104475761140d916114089084906113ff6001600160a01b036113f6838c611701565b51169188611701565b519033896118b6565b611b91565b6113c5565b6064906040519062461bcd60e51b825260048201526014602482015273098cadcced0e8e640c8de40dcdee840dac2e8c6d60631b6044820152fd5b8235815291810191859101611387565b6040810190811067ffffffffffffffff82111761078157604052565b90601f8019910116810190811067ffffffffffffffff82111761078157604052565b67ffffffffffffffff81116107815760051b60200190565b600435906001600160a01b03821682036101ab57565b602435906001600160a01b03821682036101ab57565b81601f820112156101ab578035916114f68361149b565b926115046040519485611479565b808452602092838086019260051b8201019283116101ab578301905b82821061152e575050505090565b81356001600160a01b03811681036101ab578152908301908301611520565b81601f820112156101ab5780359067ffffffffffffffff82116107815760405192611582601f8401601f191660200185611479565b828452602083830101116101ab57816000926020809301838601378301015290565b80548210156110595760005260206000200190600090565b90600182811c921680156115ec575b60208310146115d657565b634e487b7160e01b600052602260045260246000fd5b91607f16916115cb565b919082519283825260005b848110611622575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201611601565b60001981146101955760010190565b600091818352600160205260016040842001805490600160401b8210156116ae5790611676916001820181556115a4565b919080549260031b60018060a01b039384821b809233901b169119161790551682526003602052604082209082526020526040812055565b634e487b7160e01b85526041600452602485fd5b9190820391821161019557565b906116d98261149b565b6116e66040519182611479565b82815280926116f7601f199161149b565b0190602036910137565b80518210156110595760209160051b010190565b60009081526001916020838152836040842001604051918281835491828152019286528186209186905b8282106117ae575050505090611759818694930382611479565b83945b611769575b505050905090565b80518510156117a9576001600160a01b03806117858784611701565b5116908316146117a15761179a839495611636565b949361175c565b505091505090565b611761565b83546001600160a01b0316855293840193928801929088019061173f565b156117d357565b60405162461bcd60e51b815260206004820152602260248201527f596f7520617265206e6f742061206d656d626572206f6620746869732067726f604482015261075760f41b6064820152608490fd5b60005b6001600160a01b0383166000908152600260205260409081902054821015611878576118568284926000206115a4565b90549060031b1c146118705761186b90611636565b611826565b505050600190565b50505050600090565b8181039291600013801582851316918412161761019557565b9190916000838201938412911290801582169115161761019557565b9192909282600052600160205260406000209360038501948554956118da87611636565b90556040519060a082019082821067ffffffffffffffff8311176107815760029160405288835260018060a01b038416602084015260018060a01b03851660408401528560608401526000608084015287600052016020526040600020815180519067ffffffffffffffff82116107815761195583546115bc565b601f8111611b4d575b50602090601f8311600114611ab6577f12c11720876a43af6b84ee69759066f8ae75366a16b8b46ed317390702e240ef9796959383611aa69694608094600494600092611aab575b50508160011b916000199060031b1c19161781555b6001810160018060a01b03602086015116906bffffffffffffffffffffffff60a01b9182825416179055600282019060018060a01b03604087015116908254161790556060840151600382015501910151151560ff8019835416911617905560018060a01b03811660005260036020526040600020866000526020526040600020611a47858254611881565b905560018060a01b03831660005260036020526040600020866000526020526040600020611a7685825461189a565b9055604080516001600160a01b0394851681526020810195909552606090850181905292169683928301906115f6565b0390a4565b0151905038806119a6565b908360005260206000209160005b601f1985168110611b355750936001846080946004947f12c11720876a43af6b84ee69759066f8ae75366a16b8b46ed317390702e240ef9c9b9a98611aa69a98601f19811610611b1c575b505050811b0181556119bb565b015160001960f88460031b161c19169055388080611b0f565b91926020600181928685015181550194019201611ac4565b836000526020600020601f840160051c810160208510611b8a575b601f830160051c82018110611b7e57505061195e565b60008155600101611b68565b5080611b68565b63ffffffff8091169081146101955760010190565b908160209103126101ab575180151581036101ab579056fea2646970667358221220a2c7622bef91e6b1c15a3469f6ab5348a8004d02cb54e417b2b52f48ea6bbc8564736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 114,
        "contract": "contracts/Splitwiser.sol:Splitwiser",
        "label": "nextGroupId",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 119,
        "contract": "contracts/Splitwiser.sol:Splitwiser",
        "label": "groups",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Group)106_storage)"
      },
      {
        "astId": 124,
        "contract": "contracts/Splitwiser.sol:Splitwiser",
        "label": "pendingGroupInvites",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 130,
        "contract": "contracts/Splitwiser.sol:Splitwiser",
        "label": "balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_int256))"
      },
      {
        "astId": 138,
        "contract": "contracts/Splitwiser.sol:Splitwiser",
        "label": "paymentsToDo",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(PaymentToDo)111_storage)dyn_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PaymentToDo)111_storage)dyn_storage": {
        "base": "t_struct(PaymentToDo)111_storage",
        "encoding": "dynamic_array",
        "label": "struct Splitwiser.PaymentToDo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(PaymentToDo)111_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct Splitwiser.PaymentToDo[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_struct(PaymentToDo)111_storage)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_int256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => int256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_int256)"
      },
      "t_mapping(t_uint256,t_array(t_struct(PaymentToDo)111_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Splitwiser.PaymentToDo[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(PaymentToDo)111_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_uint256,t_struct(Debt)91_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Splitwiser.Debt)",
        "numberOfBytes": "32",
        "value": "t_struct(Debt)91_storage"
      },
      "t_mapping(t_uint256,t_struct(Group)106_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Splitwiser.Group)",
        "numberOfBytes": "32",
        "value": "t_struct(Group)106_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Debt)91_storage": {
        "encoding": "inplace",
        "label": "struct Splitwiser.Debt",
        "members": [
          {
            "astId": 82,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 84,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "debtor",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 86,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "creditor",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 88,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 90,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "paid",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Group)106_storage": {
        "encoding": "inplace",
        "label": "struct Splitwiser.Group",
        "members": [
          {
            "astId": 93,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "groupName",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 96,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "members",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 101,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "debts",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(Debt)91_storage)"
          },
          {
            "astId": 103,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "nextDebtId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 105,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "token",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(PaymentToDo)111_storage": {
        "encoding": "inplace",
        "label": "struct Splitwiser.PaymentToDo",
        "members": [
          {
            "astId": 108,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "creditor",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 110,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}