{
  "address": "0xC2968f8c253178846a346c9f364c7A1799b71626",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "debtId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "debtor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creditor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "DebtAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "debtor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creditor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DebtSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "GroupCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        }
      ],
      "name": "acceptInvite",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_creditor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "addDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_creditors",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "addExpense",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "createGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_person",
          "type": "address"
        }
      ],
      "name": "findDebts",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "creditor",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Splitwiser.PaymentToDo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUserGroups",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "groups",
      "outputs": [
        {
          "internalType": "string",
          "name": "groupName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "nextDebtId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_invited",
          "type": "address"
        }
      ],
      "name": "inviteMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        }
      ],
      "name": "payDebtsForGroup",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pendingGroupInvites",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_invited",
          "type": "address"
        }
      ],
      "name": "removeInvite",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        }
      ],
      "name": "settleGroupDebts",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdc635622f18202668bd2dbda2a2ad1c220fd2671bd5a35c4ea8829a0c1a3f96d",
  "receipt": {
    "to": null,
    "from": "0x02136f1EBe65969D10a018aa370FaAa7d35a1a65",
    "contractAddress": "0xC2968f8c253178846a346c9f364c7A1799b71626",
    "transactionIndex": 8,
    "gasUsed": "1628271",
    "logsBloom": "0x
    "blockHash": "0xd6724f3ff7183e81f94512b4f973124e9c58233162f9e28eeb5ec5589f5057a3",
    "transactionHash": "0xdc635622f18202668bd2dbda2a2ad1c220fd2671bd5a35c4ea8829a0c1a3f96d",
    "logs": [],
    "blockNumber": 12566621,
    "cumulativeGasUsed": "2689080",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "75fc641eb7ee1f31bb0d2efb5ce73fc0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"debtId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creditor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"DebtAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creditor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DebtSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"GroupCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"}],\"name\":\"acceptInvite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_creditor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"addDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_creditors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"addExpense\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"createGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_person\",\"type\":\"address\"}],\"name\":\"findDebts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creditor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Splitwiser.PaymentToDo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserGroups\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"groups\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"groupName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nextDebtId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_invited\",\"type\":\"address\"}],\"name\":\"inviteMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"}],\"name\":\"payDebtsForGroup\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingGroupInvites\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_invited\",\"type\":\"address\"}],\"name\":\"removeInvite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"}],\"name\":\"settleGroupDebts\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Splitwiser.sol\":\"Splitwiser\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/Splitwiser.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\ncontract Splitwiser {\\n    struct Debt {\\n        string name;\\n        address debtor;\\n        address creditor;\\n        uint256 amount;\\n        bool paid;\\n    }\\n\\n    struct Group {\\n        string groupName;\\n        address[] members;\\n        mapping(uint256 => Debt) debts; // A mapping from debtId to actual Debt\\n        uint256 nextDebtId;\\n        address token;\\n    }\\n\\n    // (Optimization) Data structure to keep track of what a person owe and\\n    // in what group.\\n    struct PaymentToDo {\\n        address creditor;\\n        uint256 amount;\\n    }\\n\\n    event GroupCreated(uint256 indexed groupId, address creator);\\n\\n    uint256 private nextGroupId = 1; // Keep track of the next groupId\\n    mapping(uint256 => Group) public groups;\\n    mapping(address => uint256[]) public pendingGroupInvites; // Database of pending user invitations to a group(s)\\n\\n    // (Optimization) A mapping address => groupId => balance\\n    // to keep track of user balance in smart contract\\n    mapping(address => mapping(uint256 => int256)) public balances;\\n\\n    // (Optimization) A mapping of address => groupId => payments ( creditor + amt )\\n    // to keep track of what a person owe and in what group. Faster and cheaper than iterating all groups.\\n    mapping(address => mapping(uint256 => PaymentToDo[])) private paymentsToDo;\\n\\n    // Event to notify users if a new debt is added\\n    event DebtAdded(uint256 indexed groupId, uint256 indexed debtId, address indexed debtor, address creditor, uint256 amount, string name);\\n\\n    modifier onlyMember(uint256 _groupId) {\\n        require(isMember(_groupId, msg.sender), \\\"You are not a member of this group\\\");\\n        _;\\n    }\\n\\n    function acceptInvite(uint256 _groupId) public {\\n        uint256[] storage invitations = pendingGroupInvites[msg.sender];\\n        require(invitations.length > 0, \\\"No pending invites\\\");\\n        for(uint i = 0; i < invitations.length; i++) {\\n            if(invitations[i] == _groupId){\\n                delete pendingGroupInvites[msg.sender][i];\\n                _addMember(_groupId, msg.sender);\\n            }\\n        }\\n    }\\n\\n    function _addMember(uint256 _groupId, address _member) internal {\\n        groups[_groupId].members.push(msg.sender);\\n        balances[_member][_groupId] = 0;\\n    }\\n\\n    function getUserGroups() external view returns (uint256[] memory) {\\n        uint256 count = 0;\\n        uint256[] memory tempGroups = new uint256[](nextGroupId - 1);\\n        for (uint256 i = 1; i < nextGroupId; i++) {\\n            if (isMember(i, msg.sender)) {\\n                tempGroups[count++] = i;\\n            }\\n        }\\n\\n        uint256[] memory userGroups = new uint256[](count);\\n        for (uint256 j = 0; j < count; j++) {\\n            userGroups[j] = tempGroups[j];\\n        }\\n\\n        return userGroups;\\n    }\\n\\n    function createGroup(string memory _name, address[] memory _members, address _token) external {\\n        uint256 currentGroupId = nextGroupId;\\n        Group storage newGroup = groups[currentGroupId];\\n        nextGroupId = nextGroupId + 1;\\n        newGroup.groupName = _name;\\n\\n        for (uint i = 0; i < _members.length; i++) {\\n            _addMember(currentGroupId, _members[i]);\\n        }\\n        _addMember(currentGroupId, msg.sender);\\n\\n        newGroup.nextDebtId = 1;\\n        newGroup.token = _token;\\n        emit GroupCreated(currentGroupId, msg.sender);\\n    }\\n\\n    function isMember(uint256 _groupId, address _member) internal view returns (bool) {\\n        address[] memory members = groups[_groupId].members;\\n        for (uint i = 0; i < members.length; i++) {\\n            if (members[i] == _member) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function isPending(uint256 _groupId, address _member) internal view returns (bool) {\\n        for(uint i = 0; i < pendingGroupInvites[_member].length; i++) {\\n            if (pendingGroupInvites[_member][i] == _groupId) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function inviteMember(uint256 _groupId, address _invited) public onlyMember(_groupId) {\\n        require(!isPending(_groupId, _invited) && !isMember(_groupId, _invited), \\\"Member is already in (pending) group\\\");\\n        pendingGroupInvites[_invited].push(_groupId);\\n    }\\n\\n    function removeInvite(uint256 _groupId, address _invited) public onlyMember(_groupId) {\\n        require(!isMember(_groupId, _invited), \\\"Member is already in group\\\");\\n        uint256[] storage invites = pendingGroupInvites[_invited];\\n        for (uint i = 0; i < invites.length; i++) {\\n            if (invites[i] == _groupId) {\\n                invites[i] = invites[invites.length - 1];\\n                invites.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function addDebt(uint256 _groupId, address _creditor, uint256 _amount, string memory _name) external onlyMember(_groupId) {\\n        require(_creditor != msg.sender, \\\"Cannot owe yourself\\\");\\n        require(_amount > 0, \\\"Amount must be positive\\\");\\n        require(isMember(_groupId, _creditor), \\\"Creditor must be a group member\\\");\\n\\n        _addDebt(_groupId, msg.sender, _creditor, _amount, _name);\\n    }\\n\\n    function _addDebt(uint256 _groupId, address _debitor, address _creditor, uint256 _amount, string memory _name) internal {\\n        Group storage group = groups[_groupId];\\n        uint256 debtId = group.nextDebtId++;\\n        group.debts[debtId] = Debt(_name, _debitor, _creditor, _amount, false);\\n\\n        balances[_debitor][_groupId] -= int256(_amount);\\n        balances[_creditor][_groupId] += int256(_amount);\\n\\n        emit DebtAdded(_groupId, debtId, _debitor, _creditor, _amount, _name);\\n    }\\n\\n    function addExpense(uint256 _groupId, address[] memory _creditors, uint256[] memory _amounts, string memory _name) external onlyMember(_groupId) {\\n        require(_creditors.length == _amounts.length , \\\"Lenghts do not match\\\");\\n        for(uint32 i=0; i<_creditors.length; i++){\\n            _addDebt(_groupId, msg.sender, _creditors[i], _amounts[i], _name);\\n        }\\n    }\\n\\n    function findDebts(uint256 _groupId, address _person) external view onlyMember(_groupId) returns (PaymentToDo[] memory){\\n        return paymentsToDo[_person][_groupId];\\n    }\\n\\n    function payDebtsForGroup(uint256 _groupId) external payable {\\n        int256 totalAmount = balances[msg.sender][_groupId];\\n        require(totalAmount < 0, \\\"You do not owe anything in this group\\\");\\n        IERC20 token = IERC20(groups[_groupId].token);\\n        require(token.transferFrom(msg.sender, address(this), uint256(-totalAmount)), \\\"Transfer failed\\\");\\n        PaymentToDo[]memory ptd = paymentsToDo[msg.sender][_groupId];\\n        balances[msg.sender][_groupId] = 0;\\n\\n        for(uint32 i=0; i<ptd.length;i++) {\\n            require(token.transfer(ptd[i].creditor, ptd[i].amount), \\\"Transfer to recipient failed\\\");\\n            balances[ptd[i].creditor][_groupId] -= int256(ptd[i].amount);\\n        }\\n    }\\n\\n    function settleGroupDebts(uint256 _groupId) payable external onlyMember(_groupId) {\\n        Group storage group = groups[_groupId];\\n        address[] memory members = group.members;\\n        address[] memory debtors = new address[](members.length);\\n        address[] memory creditors = new address[](members.length);\\n        uint256 debtorCount = 0;\\n        uint256 creditorCount = 0;\\n        mapping(address => mapping(uint256 => int256)) storage balances_temp = balances;\\n\\n        // Separate debtors and creditors\\n        for (uint256 i = 0; i < members.length; i++) {\\n            int256 balance = balances_temp[members[i]][_groupId];\\n            if (balance < 0) {\\n                debtors[debtorCount++] = members[i];\\n            } else if (balance > 0) {\\n                creditors[creditorCount++] = members[i];\\n            }\\n        }\\n\\n        sortAddresses(debtors, debtorCount, _groupId, true);\\n        sortAddresses(creditors, creditorCount, _groupId, false);\\n\\n        uint256 debtorIndex = 0;\\n        uint256 creditorIndex = 0;\\n        while (debtorIndex < debtorCount && creditorIndex < creditorCount) {\\n            address debtor = debtors[debtorIndex];\\n            address creditor = creditors[creditorIndex];\\n            uint256 amount = uint256(min(-int128(balances_temp[debtor][_groupId]), int128(balances_temp[creditor][_groupId])));\\n\\n            paymentsToDo[debtor][_groupId].push(PaymentToDo(creditor, amount));\\n\\n            balances_temp[debtor][_groupId] += int256(amount);\\n            balances_temp[creditor][_groupId] -= int256(amount);\\n\\n            emit DebtSettled(_groupId, debtor, creditor, amount);\\n\\n            if (balances_temp[debtor][_groupId] == 0) debtorIndex++;\\n            if (balances_temp[creditor][_groupId] == 0) creditorIndex++;\\n\\n        }\\n    }\\n\\n    function sortAddresses(address[] memory arr, uint256 count, uint256 _groupId, bool isDebtors) internal view {\\n        for (uint256 i = 0; i < count - 1; i++) {\\n            for (uint256 j = 0; j < count - i - 1; j++) {\\n                if (isDebtors) {\\n                    if (balances[arr[j]][_groupId] > balances[arr[j + 1]][_groupId]) {\\n                        (arr[j], arr[j + 1]) = (arr[j + 1], arr[j]);\\n                    }\\n                } else {\\n                    if (balances[arr[j]][_groupId] < balances[arr[j + 1]][_groupId]) {\\n                        (arr[j], arr[j + 1]) = (arr[j + 1], arr[j]);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    event DebtSettled(uint256 indexed groupId, address indexed debtor, address indexed creditor, uint256 amount);\\n}\\n\",\"keccak256\":\"0x0e09e8f0556a4db30f5e63d3050c2a9e27aa3bb8e11f246071b0bf4d5dfacdd0\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001b576001600055611c1890816100218239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c80631432aa7c146113215780633168a129146110f957806338514b7e146110a15780634fece28e14610b4d57806368a21ef314610a0b5780638db66ed8146108e357806396324bd4146107f95780639e6d6830146106ed578063aa22bd1b146105e8578063bf8e917614610518578063c56f5bba146101f8578063cbf1304d146101b05763d8314ffc146100ab57600080fd5b346101ab5760003660031901126101ab57600080546000198101818111610195576100d5906116f3565b600191825b81811061015f5750506100ec836116f3565b9260005b818110610136575050506040519060208083018184528451809152816040850195019160005b8281106101235785870386f35b8351875295810195928101928401610116565b8061014661015792859795611725565b516101518286611725565b5261165a565b9391936100f0565b610179906101709593953382611739565b6101815761165a565b9391936100da565b8061015161018e8661165a565b9588611725565b634e487b7160e01b600052601160045260246000fd5b600080fd5b346101ab5760403660031901126101ab576001600160a01b036101d16114d7565b16600052600360205260406000206024356000526020526020604060002054604051908152f35b6020806003193601126101ab57600435903360005260039182825260406000208160005282526040600020549060008212156104c557600081815260018085526040909120600401546001600160a01b039081169591949190600160ff1b8514610195576000604051956323b872dd60e01b8752336004880152602496308882015260449183038282015285818b8160649687925af190811561043b576000916104a8575b5015610476573360005260048552604060002086600052855260406000209687546102c7816114bf565b986102d56040519a8b61149d565b818a5260009081528781208b898c015b8a8585106104495750505050505033600052848652604060002087600052865260006040812055886000905b61031757005b885163ffffffff821690811015610447578b888b8682610345868c61033c8287611725565b51511694611725565b510151916000604051958694859363a9059cbb60e01b855260048501528a8401525af190811561043b5760009161040e575b50156103cc5790818661039b8a6103916103c6968f611725565b510151928d611725565b51511660005287895260406000208a60005289526103bf60406000209182546118a5565b9055611bb5565b89610311565b60405162461bcd60e51b815260048101899052601c818501527f5472616e7366657220746f20726563697069656e74206661696c656400000000818601528590fd5b61042e9150893d8b11610434575b610426818361149d565b810190611bca565b8d610377565b503d61041c565b6040513d6000823e3d90fd5b005b60029160405161045881611481565b8b865416815284860154838201528152019201920191908c906102e5565b6e151c985b9cd9995c8819985a5b1959608a1b8591600f896040519462461bcd60e51b86526004860152840152820152fd5b6104bf9150863d881161043457610426818361149d565b8a61029d565b60405162461bcd60e51b815260048101849052602560248201527f596f7520646f206e6f74206f776520616e797468696e6720696e207468697320604482015264067726f75760dc1b6064820152608490fd5b346101ab576020806003193601126101ab5760043590336000526002908181526040600020928354156105ae5760005b845481101561044757808261056061057193886115c8565b90549060031b1c146105765761165a565b610548565b3360005284845261059f61058e8260406000206115c8565b8154906000199060031b1b19169055565b6105a93384611669565b61165a565b60405162461bcd60e51b81526004810183905260126024820152714e6f2070656e64696e6720696e766974657360701b6044820152606490fd5b346101ab5760403660031901126101ab576004356106046114ed565b906106176106123383611739565b6117f0565b60018060a01b038092166000526020906004825260406000209060005281526040600020805491610647836114bf565b92610655604051948561149d565b8084528184018093600052826000206000915b8383106106b9575050505060405192818401908285525180915260408401929160005b8281106106985785850386f35b8351805188168652820151858301526040909401939281019260010161068b565b6002856001926040999799516106ce81611481565b8b86541681528486015483820152815201920192019190959395610668565b346101ab5760403660031901126101ab576004356107096114ed565b6107166106123384611739565b6107208183611847565b15806107e8575b15610797576001600160a01b0316600090815260026020526040902080549190600160401b8310156107815782610766916001610447950181556115c8565b90919082549060031b600019811b9283911b16911916179055565b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b8152602060048201526024808201527f4d656d62657220697320616c726561647920696e202870656e64696e672920676044820152630726f75760e41b6064820152608490fd5b506107f38183611739565b15610727565b346101ab576020806003193601126101ab5760043560005260019081815260406000209060405191600093815490610830826115e0565b808652918181169081156108c5575060011461088d575b50506108588361088095038461149d565b600381015490600460018060a01b03910154169060405194859460608652606086019061161a565b9284015260408301520390f35b60008381528481209096505b8287106108b25750505092820181019261085883610847565b8054868801860152958401958101610899565b60ff1916858701525050151560051b83018201935061085883610847565b346101ab5760403660031901126101ab576004356108ff6114ed565b61090c6106123384611739565b6109168183611739565b6109c6576001600160a01b03166000908152600260205260408120915b82549182811015610447578161094982866115c8565b919054600392831b1c14610969575061096391925061165a565b90610933565b915060001992838101908111610195576109969261098a61076692876115c8565b9054911b1c91856115c8565b815480156109b05701906109ad61058e83836115c8565b55005b634e487b7160e01b600052603160045260246000fd5b60405162461bcd60e51b815260206004820152601a60248201527f4d656d62657220697320616c726561647920696e2067726f75700000000000006044820152606490fd5b346101ab5760803660031901126101ab57600435610a276114ed565b60443560643567ffffffffffffffff81116101ab57610a4a903690600401611571565b91610a586106123386611739565b6001600160a01b0381163314610b12578115610acd57610a788185611739565b15610a88576104479333906118da565b60405162461bcd60e51b815260206004820152601f60248201527f4372656469746f72206d75737420626520612067726f7570206d656d626572006044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527f416d6f756e74206d75737420626520706f7369746976650000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601360248201527221b0b73737ba1037bbb2903cb7bab939b2b63360691b6044820152606490fd5b60203660031901126101ab57610b6861061233600435611739565b600435600052600160205260016040600020016040518082602082945493848152019060005260206000209260005b81811061107f575050610bac9250038261149d565b610bb681516116f3565b90610bc181516116f3565b9060009060009060005b8151811015610c6657610c34906001600160a01b0380610beb8386611725565b51166000526003602052604060002060043560005260205260406000205460008112600014610c395750610c1f8285611725565b5116610151610c2d8761165a565b9689611725565b610bcb565b600012610c47575b5061165a565b610c518285611725565b5116610c5f61018e8661165a565b5287610c41565b505090916000915b600019840184811161019557831015610d765760005b610c8e84866116e6565b600019810190811161019557811015610d65576001600160a01b03610cb38288611725565b5116600052600360205260406000206004356000526020526040600020549060018101811161019557610d1d916001600160a01b03610cf5600184018a611725565b51166000526003602052604060002060043560005260205260406000205412610d225761165a565b610c84565b6001600160a01b03610d376001830189611725565b51166001600160a01b03610d4b838a611725565b5116610d5a600184018a611725565b526101518289611725565b5091610d709061165a565b91610c6e565b600084865b600019840184811161019557831015610e405760005b610d9b84866116e6565b600019810190811161019557811015610e2f576001600160a01b03610dc08288611725565b5116600052600360205260406000206004356000526020526040600020549060018101811161019557610e2a916001600160a01b03610e02600184018a611725565b51166000526003602052604060002060043560005260205260406000205413610d225761165a565b610d91565b5091610e3a9061165a565b91610d7b565b8385916000916000945b80841080611076575b15610447576001600160a01b03610e6a8585611725565b51166001600160a01b03610e7e8888611725565b51169080600052600360205260406000206004356000526020526040600020546f7fffffffffffffffffffffffffffffff1981600f0b14610195578260005260036020526040600020600435600052602052604060002054600f0b90600f0b600003600f0b9080821260001461106f57505b8160005260046020526040600020600435600052602052604060002060405191610f1983611481565b848352806020840152815492600160401b84101561078157600184018084558410156110595760016020879587956000528160002090831b0192828060a01b038151166bffffffffffffffffffffffff60a01b855416178455015191015581600052600360205260406000206004356000526020526040600020610f9e8282546118be565b905582600052600360205260406000206004356000526020526040600020610fc78282546118a5565b90556040519081527f16c014bb6d1c6cc25e4d9c2ffff2d5052bc083462038999100ead76edf97bee0602060043592a46000526003602052604060002060043560005260205260406000205415611049575b60005260036020526040600020600435600052602052604060002054610e4a57946110439061165a565b94610e4a565b936110539061165a565b93611019565b634e487b7160e01b600052603260045260246000fd5b9050610ef0565b50818610610e53565b84546001600160a01b0316835260019485019486945060209093019201610b97565b346101ab5760403660031901126101ab576110ba6114d7565b6001600160a01b03166000908152600260205260409020805460243591908210156101ab576020916110eb916115c8565b90546040519160031b1c8152f35b346101ab5760603660031901126101ab5767ffffffffffffffff6004358181116101ab5761112b903690600401611571565b906024358181116101ab57611144903690600401611503565b6044356001600160a01b03818116918290036101ab576000549485600052600191602094838652604060002096848901808a1161019557600055835190811161078157849361119389546115e0565b601f81116112cd575b508790601f8311600114611264576000919083611259575b5050600019600383901b1c1916931b929092178655905b6000835b611226575b5050507f6958b51b54d963fa8eeeea5b61b83a9ad28f9ee9d5a2f1b8495e6866cb534bb1936004916112063388611669565b60038201550180546001600160a01b0319169091179055604051338152a2005b8151811015611254579061124c826105a98561124488979686611725565b51168b611669565b9091926111cf565b6111d4565b015190508a806111b4565b90601f198316918a600052896000209260005b8b8282106112b7575050908488959493921061129e575b505050811b0187559091506111cb565b015160001960f88460031b161c191690558a808061128e565b8385015186558a99909501949384019301611277565b9091929394508860005287600020601f840160051c810191898510611317575b90601f889796959493920160051c01905b81811061130b575061119c565b600081558796016112fe565b90915081906112ed565b346101ab5760803660031901126101ab5767ffffffffffffffff6004356024358281116101ab57611356903690600401611503565b91604435908082116101ab57366023830112156101ab5781600401359061137c826114bf565b9261138a604051948561149d565b82845260209260248486019160051b830101913683116101ab576024859101915b83831061147157505050506064359081116101ab576113ce903690600401611571565b906113dc6106123386611739565b8451835103611436575060005b84519063ffffffff811691821015610447576114319161142c9084906114236001600160a01b0361141a838c611725565b51169188611725565b519033896118da565b611bb5565b6113e9565b6064906040519062461bcd60e51b825260048201526014602482015273098cadcced0e8e640c8de40dcdee840dac2e8c6d60631b6044820152fd5b82358152918101918591016113ab565b6040810190811067ffffffffffffffff82111761078157604052565b90601f8019910116810190811067ffffffffffffffff82111761078157604052565b67ffffffffffffffff81116107815760051b60200190565b600435906001600160a01b03821682036101ab57565b602435906001600160a01b03821682036101ab57565b81601f820112156101ab5780359161151a836114bf565b92611528604051948561149d565b808452602092838086019260051b8201019283116101ab578301905b828210611552575050505090565b81356001600160a01b03811681036101ab578152908301908301611544565b81601f820112156101ab5780359067ffffffffffffffff821161078157604051926115a6601f8401601f19166020018561149d565b828452602083830101116101ab57816000926020809301838601378301015290565b80548210156110595760005260206000200190600090565b90600182811c92168015611610575b60208310146115fa57565b634e487b7160e01b600052602260045260246000fd5b91607f16916115ef565b919082519283825260005b848110611646575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201611625565b60001981146101955760010190565b600091818352600160205260016040842001805490600160401b8210156116d2579061169a916001820181556115c8565b919080549260031b60018060a01b039384821b809233901b169119161790551682526003602052604082209082526020526040812055565b634e487b7160e01b85526041600452602485fd5b9190820391821161019557565b906116fd826114bf565b61170a604051918261149d565b828152809261171b601f19916114bf565b0190602036910137565b80518210156110595760209160051b010190565b60009081526001916020838152836040842001604051918281835491828152019286528186209186905b8282106117d257505050509061177d81869493038261149d565b83945b61178d575b505050905090565b80518510156117cd576001600160a01b03806117a98784611725565b5116908316146117c5576117be83949561165a565b9493611780565b505091505090565b611785565b83546001600160a01b03168552938401939288019290880190611763565b156117f757565b60405162461bcd60e51b815260206004820152602260248201527f596f7520617265206e6f742061206d656d626572206f6620746869732067726f604482015261075760f41b6064820152608490fd5b60005b6001600160a01b038316600090815260026020526040908190205482101561189c5761187a8284926000206115c8565b90549060031b1c146118945761188f9061165a565b61184a565b505050600190565b50505050600090565b8181039291600013801582851316918412161761019557565b9190916000838201938412911290801582169115161761019557565b9192909282600052600160205260406000209360038501948554956118fe8761165a565b90556040519060a082019082821067ffffffffffffffff8311176107815760029160405288835260018060a01b038416602084015260018060a01b03851660408401528560608401526000608084015287600052016020526040600020815180519067ffffffffffffffff82116107815761197983546115e0565b601f8111611b71575b50602090601f8311600114611ada577f12c11720876a43af6b84ee69759066f8ae75366a16b8b46ed317390702e240ef9796959383611aca9694608094600494600092611acf575b50508160011b916000199060031b1c19161781555b6001810160018060a01b03602086015116906bffffffffffffffffffffffff60a01b9182825416179055600282019060018060a01b03604087015116908254161790556060840151600382015501910151151560ff8019835416911617905560018060a01b03811660005260036020526040600020866000526020526040600020611a6b8582546118a5565b905560018060a01b03831660005260036020526040600020866000526020526040600020611a9a8582546118be565b9055604080516001600160a01b03948516815260208101959095526060908501819052921696839283019061161a565b0390a4565b0151905038806119ca565b908360005260206000209160005b601f1985168110611b595750936001846080946004947f12c11720876a43af6b84ee69759066f8ae75366a16b8b46ed317390702e240ef9c9b9a98611aca9a98601f19811610611b40575b505050811b0181556119df565b015160001960f88460031b161c19169055388080611b33565b91926020600181928685015181550194019201611ae8565b836000526020600020601f840160051c810160208510611bae575b601f830160051c82018110611ba2575050611982565b60008155600101611b8c565b5080611b8c565b63ffffffff8091169081146101955760010190565b908160209103126101ab575180151581036101ab579056fea2646970667358221220bd5eb0deda61572baa10015cafd4ebd9e2fc34929bebb24282756c32f2be677764736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c80631432aa7c146113215780633168a129146110f957806338514b7e146110a15780634fece28e14610b4d57806368a21ef314610a0b5780638db66ed8146108e357806396324bd4146107f95780639e6d6830146106ed578063aa22bd1b146105e8578063bf8e917614610518578063c56f5bba146101f8578063cbf1304d146101b05763d8314ffc146100ab57600080fd5b346101ab5760003660031901126101ab57600080546000198101818111610195576100d5906116f3565b600191825b81811061015f5750506100ec836116f3565b9260005b818110610136575050506040519060208083018184528451809152816040850195019160005b8281106101235785870386f35b8351875295810195928101928401610116565b8061014661015792859795611725565b516101518286611725565b5261165a565b9391936100f0565b610179906101709593953382611739565b6101815761165a565b9391936100da565b8061015161018e8661165a565b9588611725565b634e487b7160e01b600052601160045260246000fd5b600080fd5b346101ab5760403660031901126101ab576001600160a01b036101d16114d7565b16600052600360205260406000206024356000526020526020604060002054604051908152f35b6020806003193601126101ab57600435903360005260039182825260406000208160005282526040600020549060008212156104c557600081815260018085526040909120600401546001600160a01b039081169591949190600160ff1b8514610195576000604051956323b872dd60e01b8752336004880152602496308882015260449183038282015285818b8160649687925af190811561043b576000916104a8575b5015610476573360005260048552604060002086600052855260406000209687546102c7816114bf565b986102d56040519a8b61149d565b818a5260009081528781208b898c015b8a8585106104495750505050505033600052848652604060002087600052865260006040812055886000905b61031757005b885163ffffffff821690811015610447578b888b8682610345868c61033c8287611725565b51511694611725565b510151916000604051958694859363a9059cbb60e01b855260048501528a8401525af190811561043b5760009161040e575b50156103cc5790818661039b8a6103916103c6968f611725565b510151928d611725565b51511660005287895260406000208a60005289526103bf60406000209182546118a5565b9055611bb5565b89610311565b60405162461bcd60e51b815260048101899052601c818501527f5472616e7366657220746f20726563697069656e74206661696c656400000000818601528590fd5b61042e9150893d8b11610434575b610426818361149d565b810190611bca565b8d610377565b503d61041c565b6040513d6000823e3d90fd5b005b60029160405161045881611481565b8b865416815284860154838201528152019201920191908c906102e5565b6e151c985b9cd9995c8819985a5b1959608a1b8591600f896040519462461bcd60e51b86526004860152840152820152fd5b6104bf9150863d881161043457610426818361149d565b8a61029d565b60405162461bcd60e51b815260048101849052602560248201527f596f7520646f206e6f74206f776520616e797468696e6720696e207468697320604482015264067726f75760dc1b6064820152608490fd5b346101ab576020806003193601126101ab5760043590336000526002908181526040600020928354156105ae5760005b845481101561044757808261056061057193886115c8565b90549060031b1c146105765761165a565b610548565b3360005284845261059f61058e8260406000206115c8565b8154906000199060031b1b19169055565b6105a93384611669565b61165a565b60405162461bcd60e51b81526004810183905260126024820152714e6f2070656e64696e6720696e766974657360701b6044820152606490fd5b346101ab5760403660031901126101ab576004356106046114ed565b906106176106123383611739565b6117f0565b60018060a01b038092166000526020906004825260406000209060005281526040600020805491610647836114bf565b92610655604051948561149d565b8084528184018093600052826000206000915b8383106106b9575050505060405192818401908285525180915260408401929160005b8281106106985785850386f35b8351805188168652820151858301526040909401939281019260010161068b565b6002856001926040999799516106ce81611481565b8b86541681528486015483820152815201920192019190959395610668565b346101ab5760403660031901126101ab576004356107096114ed565b6107166106123384611739565b6107208183611847565b15806107e8575b15610797576001600160a01b0316600090815260026020526040902080549190600160401b8310156107815782610766916001610447950181556115c8565b90919082549060031b600019811b9283911b16911916179055565b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b8152602060048201526024808201527f4d656d62657220697320616c726561647920696e202870656e64696e672920676044820152630726f75760e41b6064820152608490fd5b506107f38183611739565b15610727565b346101ab576020806003193601126101ab5760043560005260019081815260406000209060405191600093815490610830826115e0565b808652918181169081156108c5575060011461088d575b50506108588361088095038461149d565b600381015490600460018060a01b03910154169060405194859460608652606086019061161a565b9284015260408301520390f35b60008381528481209096505b8287106108b25750505092820181019261085883610847565b8054868801860152958401958101610899565b60ff1916858701525050151560051b83018201935061085883610847565b346101ab5760403660031901126101ab576004356108ff6114ed565b61090c6106123384611739565b6109168183611739565b6109c6576001600160a01b03166000908152600260205260408120915b82549182811015610447578161094982866115c8565b919054600392831b1c14610969575061096391925061165a565b90610933565b915060001992838101908111610195576109969261098a61076692876115c8565b9054911b1c91856115c8565b815480156109b05701906109ad61058e83836115c8565b55005b634e487b7160e01b600052603160045260246000fd5b60405162461bcd60e51b815260206004820152601a60248201527f4d656d62657220697320616c726561647920696e2067726f75700000000000006044820152606490fd5b346101ab5760803660031901126101ab57600435610a276114ed565b60443560643567ffffffffffffffff81116101ab57610a4a903690600401611571565b91610a586106123386611739565b6001600160a01b0381163314610b12578115610acd57610a788185611739565b15610a88576104479333906118da565b60405162461bcd60e51b815260206004820152601f60248201527f4372656469746f72206d75737420626520612067726f7570206d656d626572006044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527f416d6f756e74206d75737420626520706f7369746976650000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601360248201527221b0b73737ba1037bbb2903cb7bab939b2b63360691b6044820152606490fd5b60203660031901126101ab57610b6861061233600435611739565b600435600052600160205260016040600020016040518082602082945493848152019060005260206000209260005b81811061107f575050610bac9250038261149d565b610bb681516116f3565b90610bc181516116f3565b9060009060009060005b8151811015610c6657610c34906001600160a01b0380610beb8386611725565b51166000526003602052604060002060043560005260205260406000205460008112600014610c395750610c1f8285611725565b5116610151610c2d8761165a565b9689611725565b610bcb565b600012610c47575b5061165a565b610c518285611725565b5116610c5f61018e8661165a565b5287610c41565b505090916000915b600019840184811161019557831015610d765760005b610c8e84866116e6565b600019810190811161019557811015610d65576001600160a01b03610cb38288611725565b5116600052600360205260406000206004356000526020526040600020549060018101811161019557610d1d916001600160a01b03610cf5600184018a611725565b51166000526003602052604060002060043560005260205260406000205412610d225761165a565b610c84565b6001600160a01b03610d376001830189611725565b51166001600160a01b03610d4b838a611725565b5116610d5a600184018a611725565b526101518289611725565b5091610d709061165a565b91610c6e565b600084865b600019840184811161019557831015610e405760005b610d9b84866116e6565b600019810190811161019557811015610e2f576001600160a01b03610dc08288611725565b5116600052600360205260406000206004356000526020526040600020549060018101811161019557610e2a916001600160a01b03610e02600184018a611725565b51166000526003602052604060002060043560005260205260406000205413610d225761165a565b610d91565b5091610e3a9061165a565b91610d7b565b8385916000916000945b80841080611076575b15610447576001600160a01b03610e6a8585611725565b51166001600160a01b03610e7e8888611725565b51169080600052600360205260406000206004356000526020526040600020546f7fffffffffffffffffffffffffffffff1981600f0b14610195578260005260036020526040600020600435600052602052604060002054600f0b90600f0b600003600f0b9080821260001461106f57505b8160005260046020526040600020600435600052602052604060002060405191610f1983611481565b848352806020840152815492600160401b84101561078157600184018084558410156110595760016020879587956000528160002090831b0192828060a01b038151166bffffffffffffffffffffffff60a01b855416178455015191015581600052600360205260406000206004356000526020526040600020610f9e8282546118be565b905582600052600360205260406000206004356000526020526040600020610fc78282546118a5565b90556040519081527f16c014bb6d1c6cc25e4d9c2ffff2d5052bc083462038999100ead76edf97bee0602060043592a46000526003602052604060002060043560005260205260406000205415611049575b60005260036020526040600020600435600052602052604060002054610e4a57946110439061165a565b94610e4a565b936110539061165a565b93611019565b634e487b7160e01b600052603260045260246000fd5b9050610ef0565b50818610610e53565b84546001600160a01b0316835260019485019486945060209093019201610b97565b346101ab5760403660031901126101ab576110ba6114d7565b6001600160a01b03166000908152600260205260409020805460243591908210156101ab576020916110eb916115c8565b90546040519160031b1c8152f35b346101ab5760603660031901126101ab5767ffffffffffffffff6004358181116101ab5761112b903690600401611571565b906024358181116101ab57611144903690600401611503565b6044356001600160a01b03818116918290036101ab576000549485600052600191602094838652604060002096848901808a1161019557600055835190811161078157849361119389546115e0565b601f81116112cd575b508790601f8311600114611264576000919083611259575b5050600019600383901b1c1916931b929092178655905b6000835b611226575b5050507f6958b51b54d963fa8eeeea5b61b83a9ad28f9ee9d5a2f1b8495e6866cb534bb1936004916112063388611669565b60038201550180546001600160a01b0319169091179055604051338152a2005b8151811015611254579061124c826105a98561124488979686611725565b51168b611669565b9091926111cf565b6111d4565b015190508a806111b4565b90601f198316918a600052896000209260005b8b8282106112b7575050908488959493921061129e575b505050811b0187559091506111cb565b015160001960f88460031b161c191690558a808061128e565b8385015186558a99909501949384019301611277565b9091929394508860005287600020601f840160051c810191898510611317575b90601f889796959493920160051c01905b81811061130b575061119c565b600081558796016112fe565b90915081906112ed565b346101ab5760803660031901126101ab5767ffffffffffffffff6004356024358281116101ab57611356903690600401611503565b91604435908082116101ab57366023830112156101ab5781600401359061137c826114bf565b9261138a604051948561149d565b82845260209260248486019160051b830101913683116101ab576024859101915b83831061147157505050506064359081116101ab576113ce903690600401611571565b906113dc6106123386611739565b8451835103611436575060005b84519063ffffffff811691821015610447576114319161142c9084906114236001600160a01b0361141a838c611725565b51169188611725565b519033896118da565b611bb5565b6113e9565b6064906040519062461bcd60e51b825260048201526014602482015273098cadcced0e8e640c8de40dcdee840dac2e8c6d60631b6044820152fd5b82358152918101918591016113ab565b6040810190811067ffffffffffffffff82111761078157604052565b90601f8019910116810190811067ffffffffffffffff82111761078157604052565b67ffffffffffffffff81116107815760051b60200190565b600435906001600160a01b03821682036101ab57565b602435906001600160a01b03821682036101ab57565b81601f820112156101ab5780359161151a836114bf565b92611528604051948561149d565b808452602092838086019260051b8201019283116101ab578301905b828210611552575050505090565b81356001600160a01b03811681036101ab578152908301908301611544565b81601f820112156101ab5780359067ffffffffffffffff821161078157604051926115a6601f8401601f19166020018561149d565b828452602083830101116101ab57816000926020809301838601378301015290565b80548210156110595760005260206000200190600090565b90600182811c92168015611610575b60208310146115fa57565b634e487b7160e01b600052602260045260246000fd5b91607f16916115ef565b919082519283825260005b848110611646575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201611625565b60001981146101955760010190565b600091818352600160205260016040842001805490600160401b8210156116d2579061169a916001820181556115c8565b919080549260031b60018060a01b039384821b809233901b169119161790551682526003602052604082209082526020526040812055565b634e487b7160e01b85526041600452602485fd5b9190820391821161019557565b906116fd826114bf565b61170a604051918261149d565b828152809261171b601f19916114bf565b0190602036910137565b80518210156110595760209160051b010190565b60009081526001916020838152836040842001604051918281835491828152019286528186209186905b8282106117d257505050509061177d81869493038261149d565b83945b61178d575b505050905090565b80518510156117cd576001600160a01b03806117a98784611725565b5116908316146117c5576117be83949561165a565b9493611780565b505091505090565b611785565b83546001600160a01b03168552938401939288019290880190611763565b156117f757565b60405162461bcd60e51b815260206004820152602260248201527f596f7520617265206e6f742061206d656d626572206f6620746869732067726f604482015261075760f41b6064820152608490fd5b60005b6001600160a01b038316600090815260026020526040908190205482101561189c5761187a8284926000206115c8565b90549060031b1c146118945761188f9061165a565b61184a565b505050600190565b50505050600090565b8181039291600013801582851316918412161761019557565b9190916000838201938412911290801582169115161761019557565b9192909282600052600160205260406000209360038501948554956118fe8761165a565b90556040519060a082019082821067ffffffffffffffff8311176107815760029160405288835260018060a01b038416602084015260018060a01b03851660408401528560608401526000608084015287600052016020526040600020815180519067ffffffffffffffff82116107815761197983546115e0565b601f8111611b71575b50602090601f8311600114611ada577f12c11720876a43af6b84ee69759066f8ae75366a16b8b46ed317390702e240ef9796959383611aca9694608094600494600092611acf575b50508160011b916000199060031b1c19161781555b6001810160018060a01b03602086015116906bffffffffffffffffffffffff60a01b9182825416179055600282019060018060a01b03604087015116908254161790556060840151600382015501910151151560ff8019835416911617905560018060a01b03811660005260036020526040600020866000526020526040600020611a6b8582546118a5565b905560018060a01b03831660005260036020526040600020866000526020526040600020611a9a8582546118be565b9055604080516001600160a01b03948516815260208101959095526060908501819052921696839283019061161a565b0390a4565b0151905038806119ca565b908360005260206000209160005b601f1985168110611b595750936001846080946004947f12c11720876a43af6b84ee69759066f8ae75366a16b8b46ed317390702e240ef9c9b9a98611aca9a98601f19811610611b40575b505050811b0181556119df565b015160001960f88460031b161c19169055388080611b33565b91926020600181928685015181550194019201611ae8565b836000526020600020601f840160051c810160208510611bae575b601f830160051c82018110611ba2575050611982565b60008155600101611b8c565b5080611b8c565b63ffffffff8091169081146101955760010190565b908160209103126101ab575180151581036101ab579056fea2646970667358221220bd5eb0deda61572baa10015cafd4ebd9e2fc34929bebb24282756c32f2be677764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 120,
        "contract": "contracts/Splitwiser.sol:Splitwiser",
        "label": "nextGroupId",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 125,
        "contract": "contracts/Splitwiser.sol:Splitwiser",
        "label": "groups",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Group)106_storage)"
      },
      {
        "astId": 130,
        "contract": "contracts/Splitwiser.sol:Splitwiser",
        "label": "pendingGroupInvites",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 136,
        "contract": "contracts/Splitwiser.sol:Splitwiser",
        "label": "balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_int256))"
      },
      {
        "astId": 144,
        "contract": "contracts/Splitwiser.sol:Splitwiser",
        "label": "paymentsToDo",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(PaymentToDo)111_storage)dyn_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PaymentToDo)111_storage)dyn_storage": {
        "base": "t_struct(PaymentToDo)111_storage",
        "encoding": "dynamic_array",
        "label": "struct Splitwiser.PaymentToDo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(PaymentToDo)111_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct Splitwiser.PaymentToDo[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_struct(PaymentToDo)111_storage)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_int256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => int256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_int256)"
      },
      "t_mapping(t_uint256,t_array(t_struct(PaymentToDo)111_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Splitwiser.PaymentToDo[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(PaymentToDo)111_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_uint256,t_struct(Debt)91_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Splitwiser.Debt)",
        "numberOfBytes": "32",
        "value": "t_struct(Debt)91_storage"
      },
      "t_mapping(t_uint256,t_struct(Group)106_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Splitwiser.Group)",
        "numberOfBytes": "32",
        "value": "t_struct(Group)106_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Debt)91_storage": {
        "encoding": "inplace",
        "label": "struct Splitwiser.Debt",
        "members": [
          {
            "astId": 82,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 84,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "debtor",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 86,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "creditor",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 88,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 90,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "paid",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Group)106_storage": {
        "encoding": "inplace",
        "label": "struct Splitwiser.Group",
        "members": [
          {
            "astId": 93,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "groupName",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 96,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "members",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 101,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "debts",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(Debt)91_storage)"
          },
          {
            "astId": 103,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "nextDebtId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 105,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "token",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(PaymentToDo)111_storage": {
        "encoding": "inplace",
        "label": "struct Splitwiser.PaymentToDo",
        "members": [
          {
            "astId": 108,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "creditor",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 110,
            "contract": "contracts/Splitwiser.sol:Splitwiser",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}